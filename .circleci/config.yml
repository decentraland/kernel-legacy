version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10-browsers
        environment:
          # avoid automatic download of LFS files
          GIT_LFS_SKIP_SMUDGE: 1

    working_directory: /tmp/explorer
    steps:
      # Install lfs
      - run:
          name: 'Install git-lfs'
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get update && sudo apt-get install -y git-lfs=2.7.2
            ssh git@github.com git-lfs-authenticate decentraland/kernel.git download
            git lfs install
      # checkout the actual code
      - checkout

      # restore cached lfs
      - restore_cache:
          name: Restore large files from github's lfs repo
          keys:
            - gitlfs-{{ .Branch }}
            - gitlfs
      - shell:
          name: Pull Git LFS files, retry until done
          command: |
            while true; do git reset --hard HEAD && git clean -fd && git lfs pull && break; done
      - save_cache:
          name: Store large files in cache
          key: gitlfs-{{ .Branch }}
          paths:
            - .git/lfs
      - restore_cache:
          name: Restoring node_modules
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Install differences in node_modules
          command: |
            npm i
            git checkout -- package-lock.json
      - save_cache:
          name: Store node_modules cache
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Run linters and checks
          command: |
            make lint
            npm outdated --depth 0 || true
      - run:
          name: Build decentraland-ecs
          command: |
            make build-essentials
            mkdir -p scene-cache
            cd scene-cache && find . -name '*.js' | xargs -I{} cp -f -t ../public/ --parents {}; cd ..
            find public -name *.ts | xargs shasum packages/decentraland-ecs/dist/index.d.ts static/systems/scene.system.js | sort > .compiled-scene-checksum
      - restore_cache:
          name: Restore cached test scenes, part I
          keys:
            - compiled-scenes-{{ checksum ".compiled-scene-checksum" }}
      - run:
          name: Restore cached test scenes, part II
          command: |
            touch static/systems/scene.system.js
            cd scene-cache && find . -name '*.js' | xargs -I{} cp -f -t ../public/ --parents {}; cd ..
            for compiled in `find public -name '*.js'`; do touch $compiled; done
      - run:
          name: Build scenes
          command: |
            make test-scenes
      - run:
          name: Build cache of test scenes
          command: |
            cd public && find . -name '*.js' | xargs -I{} cp -f -t ../scene-cache/ --parents {}; cd ..
      - save_cache:
          name: Store cached test scenes
          paths:
            - static/systems/scene.system.js
            - scene-cache
          key: compiled-scenes-{{ checksum ".compiled-scene-checksum" }}
      - run:
          name: Run tests
          command: |
            make test-ci
            npx codecov
      - store_artifacts:
          name: Save screenshots of visual tests
          path: test/diff
          when: on_fail
      - store_artifacts:
          path: packages/decentraland-ecs/api-docs-review/decentraland-ecs.api.ts
          when: on_fail
      - store_artifacts:
          path: packages/decentraland-ecs/temp/decentraland-ecs.api.ts
          when: on_fail

      - run:
          name: Build deployment dist
          command: |
            make build-deploy
      - save_cache:
          name: Save the built files
          paths:
            - static
          key: build-{{ .Revision }}
      - save_cache:
          name: Save the files required to release an SDK version
          paths:
            - Makefile
            - packages
            - scripts
            - tsconfig.json
            - package-lock.json
            - package.json
            - .git
          key: build-sdk-{{ .Revision }}

  publish-ecs:
    docker:
      - image: circleci/node:10-browsers
    working_directory: /tmp/explorer
    steps:
      - restore_cache:
          name: Restore built files
          keys:
            - build-{{ .Revision }}
      - restore_cache:
          name: Restore sdk-release files
          keys:
            - build-sdk-{{ .Revision }}
      - restore_cache:
          name: Restore node_modules
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Set up NPM access tokens
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          when: on_success

      - run:
          name: Publish a new version of decentraland-ecs
          command: make publish
          when: on_success

  deploy-on-pr:
    docker:
      - image: circleci/node:10-browsers
    working_directory: /tmp/explorer
    steps:
      - restore_cache:
          keys:
            - build-{{ .Revision }}
      - run: sudo apt-get -y -qq install awscli
      - run:
          name: Configure DEV/STG AWS Keys
          command: |
            aws configure set aws_access_key_id ${AWS_DEV_ACCESS_KEY_ID} && aws configure set aws_secret_access_key ${AWS_DEV_SECRET_ACCESS_KEY}
      - run:
          name: Deploy to S3 (.zone) under subfolder if tests pass and branch is not master
          command: aws s3 sync static s3://explorer.decentraland.zone/branch/${CIRCLE_BRANCH} --acl public-read
      - run:
          name: Invalidate cloudfront cache .zone
          command: aws configure set preview.cloudfront true && aws configure set preview.create-invalidation true && aws cloudfront create-invalidation --distribution-id E297VXIBZFXIXE --paths "/*"

  deploy-dev:
    docker:
      - image: circleci/node:10-browsers
    working_directory: /tmp/explorer
    steps:
      - restore_cache:
          keys:
            - build-{{ .Revision }}
      - run: sudo apt-get -y -qq install awscli
      - run:
          name: Configure DEV/STG AWS Keys
          command: |
            aws configure set aws_access_key_id ${AWS_DEV_ACCESS_KEY_ID} && aws configure set aws_secret_access_key ${AWS_DEV_SECRET_ACCESS_KEY}
      - run:
          name: Deploy to S3 (.zone) if tests pass and branch is master
          command: aws s3 sync static s3://explorer.decentraland.zone/ --acl public-read
      - run:
          name: Invalidate cloudfront cache .zone
          command: aws configure set preview.cloudfront true && aws configure set preview.create-invalidation true && aws cloudfront create-invalidation --distribution-id E297VXIBZFXIXE --paths "/*"
      - run:
          name: Invalidate cloudflare cache .zone
          command: curl "$PURGE_CACHE_ZONE"

  deploy-stg:
    docker:
      - image: circleci/node:10-browsers
    working_directory: /tmp/explorer
    steps:
      - restore_cache:
          keys:
            - build-{{ .Revision }}
      - run: sudo apt-get -y -qq install awscli
      - run:
          name: Configure DEV/STG AWS Keys
          command: |
            aws configure set aws_access_key_id ${AWS_DEV_ACCESS_KEY_ID} && aws configure set aws_secret_access_key ${AWS_DEV_SECRET_ACCESS_KEY}
      - run:
          name: Deploy to .today
          command: |
            aws s3 sync static s3://explorer.decentraland.today/ --exclude "tags/*" --acl public-read
      - run:
          name: Invalidate cloudfront cache .today
          command: aws configure set preview.cloudfront true && aws configure set preview.create-invalidation true && aws cloudfront create-invalidation --distribution-id E315GYHDRD7XX6 --paths "/*"
      - run:
          name: Invalidate cloudflare cache .today
          command: curl "$PURGE_CACHE_TODAY"

  deploy-prd:
    docker:
      - image: circleci/node:10-browsers
    working_directory: /tmp/explorer
    steps:
      - restore_cache:
          keys:
            - build-{{ .Revision }}
      - run: sudo apt-get -y -qq install awscli
      - run:
          name: Configure PRD AWS Keys
          command: |
            aws configure set aws_access_key_id ${AWS_PRD_ACCESS_KEY_ID} && aws configure set aws_secret_access_key ${AWS_PRD_SECRET_ACCESS_KEY}
      - run:
          name: Deploy to .org
          command: |
            aws s3 sync static s3://explorer.decentraland.org/ --exclude "tags/*" --acl public-read
      - run:
          name: Invalidate cloudfront cache .org
          command: aws configure set preview.cloudfront true && aws configure set preview.create-invalidation true && aws cloudfront create-invalidation --distribution-id E253JP8V3Y9YUI --paths "/*"
      - run:
          name: Invalidate cloudflare cache .org
          command: curl "$PURGE_CACHE_ORG"

# Ignore branches because CircleCI OR's multiple filters
# https://discuss.circleci.com/t/workflow-job-with-tag-filter-being-run-for-every-commit/20762/4
workflows:
  version: 2
  build-deploy:
    jobs:
      - build

      # explorer master + pr branch jobs (deploy to dev + pr dev)
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-on-pr:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
                - release

      # ecs publish jobs (publish as next + latest depending on context branch/tag)
      # TODO - deploy from release branch + add an additional 'dev' tag to npm replacing 'next' + use 'next' for stg releases
      - hold-ecs:
          type: approval
          requires:
            - build
          filters:
            branches:
              only: master # next
            tags:
              only: /^\d+\.\d+\.\d(.*)/ # npm tag + latest
      - publish-ecs:
          requires:
            - hold-ecs
          filters:
            branches:
              only: master # next
            tags:
              only: /^\d+\.\d+\.\d(.*)/ # npm tag + latest

      # explorer release branch jobs (stg + prd)
      - hold-explorer-stg:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - deploy-stg:
          requires:
            - hold-explorer-stg
          filters:
            branches:
              only: release

      - hold-explorer-prd:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - deploy-prd:
          requires:
            - hold-explorer-prd
          filters:
            branches:
              only: release
