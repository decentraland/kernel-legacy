{
  "kind": "package",
  "name": "decentraland-ecs",
  "summary": [],
  "remarks": [],
  "exports": {
    "Angle": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Defines angle representation"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(radians: number);",
          "parameters": {
            "radians": {
              "name": "radians",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an Angle object of \"radians\" radians (float)."
            }
          ],
          "remarks": []
        },
        "BetweenTwoPoints": {
          "kind": "method",
          "signature": "static BetweenTwoPoints(a: Vector2, b: Vector2): Angle;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Angle",
            "description": [
              {
                "kind": "text",
                "text": "a new Angle"
              }
            ]
          },
          "parameters": {
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Angle object valued with the angle value in radians between the two given vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "degrees": {
          "kind": "method",
          "signature": "degrees(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the Angle value in degrees (float)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get value in degrees"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromDegrees": {
          "kind": "method",
          "signature": "static FromDegrees(degrees: number): Angle;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Angle",
            "description": [
              {
                "kind": "text",
                "text": "a new Angle"
              }
            ]
          },
          "parameters": {
            "degrees": {
              "name": "degrees",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle value in degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Angle object from the given float in degrees"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromRadians": {
          "kind": "method",
          "signature": "static FromRadians(radians: number): Angle;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Angle",
            "description": [
              {
                "kind": "text",
                "text": "a new Angle"
              }
            ]
          },
          "parameters": {
            "radians": {
              "name": "radians",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle value in radians"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Angle object from the given float in radians"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "radians": {
          "kind": "method",
          "signature": "radians(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the Angle value in radians (float)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get value in radians"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "AnimationClip": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(clip: string, params?: AnimationParams);",
          "parameters": {
            "clip": {
              "name": "clip",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "params": {
              "name": "params",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "AnimationParams"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "AnimationClip"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "AnimationClip",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "clip": {
          "kind": "property",
          "signature": "readonly clip: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name of the animation in the model"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "looping": {
          "kind": "property",
          "signature": "looping: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Does the animation loop?, default: true"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pause": {
          "kind": "method",
          "signature": "pause(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pauses the animation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "play": {
          "kind": "method",
          "signature": "play(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Starts the animation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "playing": {
          "kind": "property",
          "signature": "playing: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the animation playing? default: true"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setParams": {
          "kind": "method",
          "signature": "setParams(params: AnimationParams): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "params": {
              "name": "params",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "AnimationParams"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the clip parameters"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "speed": {
          "kind": "property",
          "signature": "speed: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The animation speed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "weight": {
          "kind": "property",
          "signature": "weight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Weight of the animation, values from 0 to 1, used to blend several animations. default: 1"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Animator": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addClip": {
          "kind": "method",
          "signature": "addClip(clip: AnimationClip): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "clip": {
              "name": "clip",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "AnimationClip"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds an AnimationClip to the animation lists."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClip": {
          "kind": "method",
          "signature": "getClip(clipName: string): AnimationClip;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "AnimationClip",
            "description": []
          },
          "parameters": {
            "clipName": {
              "name": "clipName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the animation clip instance for the specified clip name. If the clip doesn't exist a new one will be created."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Arc2": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "This represents an arc in a 2d space."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    startPoint: Vector2, \n    midPoint: Vector2, \n    endPoint: Vector2);",
          "parameters": {
            "startPoint": {
              "name": "startPoint",
              "description": [
                {
                  "kind": "text",
                  "text": "Defines the start point of the arc"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "midPoint": {
              "name": "midPoint",
              "description": [
                {
                  "kind": "text",
                  "text": "Defines the midlle point of the arc"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "endPoint": {
              "name": "endPoint",
              "description": [
                {
                  "kind": "text",
                  "text": "Defines the end point of the arc"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an Arc object from the three given points : start, middle and end."
            }
          ],
          "remarks": []
        },
        "angle": {
          "kind": "property",
          "signature": "angle: Angle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Angle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the angle of the arc (from mid point to end point)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "centerPoint": {
          "kind": "property",
          "signature": "centerPoint: Vector2;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the center point of the arc."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "endPoint": {
          "kind": "property",
          "signature": "endPoint: Vector2;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the end point of the arc"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "midPoint": {
          "kind": "property",
          "signature": "midPoint: Vector2;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the mid point of the arc"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orientation": {
          "kind": "property",
          "signature": "orientation: Orientation;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Orientation",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the orientation of the arc (clock wise/counter clock wise)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radius": {
          "kind": "property",
          "signature": "radius: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the radius of the arc."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "startAngle": {
          "kind": "property",
          "signature": "startAngle: Angle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Angle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the start angle of the arc (from start point to middle point)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "startPoint": {
          "kind": "property",
          "signature": "startPoint: Vector2;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the start point of the arc"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "AudioClip": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(url: string);",
          "parameters": {
            "url": {
              "name": "url",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "AudioClip"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "AudioClip",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "loop": {
          "kind": "property",
          "signature": "loop: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is this clip looping by default?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "volume": {
          "kind": "property",
          "signature": "volume: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clip's master volume. This volume affects all the AudioSources. Valid ranges from 0 to 1"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "AudioSource": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(audioClip: AudioClip);",
          "parameters": {
            "audioClip": {
              "name": "audioClip",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "AudioClip"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "AudioSource"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "AudioSource",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "audioClip": {
          "kind": "property",
          "signature": "readonly audioClip: AudioClip;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "AudioClip",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "audioClipId": {
          "kind": "property",
          "signature": "readonly audioClipId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "loop": {
          "kind": "property",
          "signature": "loop: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is this clip looping by default?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pitch": {
          "kind": "property",
          "signature": "pitch: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pitch, default: 1.0, range from 0.0 to MaxFloat"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "playing": {
          "kind": "property",
          "signature": "playing: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is this AudioSource playing?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "playOnce": {
          "kind": "method",
          "signature": "playOnce(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disables the looping and plays the current source once. If the sound was playing, it stops and starts over."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "volume": {
          "kind": "property",
          "signature": "volume: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clip's master volume. This volume affects all the AudioSources. Valid ranges from 0 to 1"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Axis": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Defines the 3 main axes"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "X": {
          "kind": "property",
          "signature": "static X: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "X axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Y": {
          "kind": "property",
          "signature": "static Y: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Y axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Z": {
          "kind": "property",
          "signature": "static Z: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Z axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "BasicMaterial": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "alphaTest": {
          "kind": "property",
          "signature": "alphaTest: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A number between 0 and 1. Any pixel with an alpha lower than this value will be shown as transparent."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "samplingMode": {
          "kind": "property",
          "signature": "samplingMode: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables crisper images based on the provided sampling mode. | Value | Type | |-------|-----------| | 1 | NEAREST | | 2 | BILINEAR | | 3 | TRILINEAR |"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "texture": {
          "kind": "property",
          "signature": "texture: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The source of the texture image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "wrap": {
          "kind": "property",
          "signature": "wrap: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables texture wrapping for this material. | Value | Type | |-------|-----------| | 1 | CLAMP | | 2 | WRAP | | 3 | MIRROR |"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "BezierCurve": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class used to represent a Bezier curve"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "Interpolate": {
          "kind": "method",
          "signature": "static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the interpolated value"
              }
            ]
          },
          "parameters": {
            "t": {
              "name": "t",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the time"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "x1": {
              "name": "x1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left coordinate on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y1": {
              "name": "y1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left coordinate on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "x2": {
              "name": "x2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right coordinate on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y2": {
              "name": "y2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right coordinate on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Billboard": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Billboard defines a behavior that makes the entity face the camera in any moment."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(x?: boolean, y?: boolean, z?: boolean);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "y": {
              "name": "y",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "z": {
              "name": "z",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Billboard"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "Billboard",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "x": {
          "kind": "property",
          "signature": "x: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "z": {
          "kind": "property",
          "signature": "z: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "BoxShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "Camera": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor();",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Camera"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "Camera",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "instance": {
          "kind": "property",
          "signature": "static readonly instance: Camera;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "Camera",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "position": {
          "kind": "property",
          "signature": "readonly position: Vector3;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotation": {
          "kind": "property",
          "signature": "readonly rotation: Quaternion;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Quaternion",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "CircleShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "arc": {
          "kind": "property",
          "signature": "arc?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "segments": {
          "kind": "property",
          "signature": "segments?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Color3": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class used to hold a RBG color"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    r?: number, \n    g?: number, \n    b?: number);",
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 object from red, green, blue values, all between 0 and 1"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(otherColor: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the new Color3"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 set with the added values of the current Color3 and of the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToRef": {
          "kind": "method",
          "signature": "addToRef(otherColor: Color3, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Color3"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines Color3 object to store the result into"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores the result of the addition of the current Color3 and given one rgb values into \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "the new array"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new array populated with 3 numeric elements : red, green and blue values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "b": {
          "kind": "property",
          "signature": "b: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the blue component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Black": {
          "kind": "method",
          "signature": "static Black(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a black color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Blue": {
          "kind": "method",
          "signature": "static Blue(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a blue color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clampToRef": {
          "kind": "method",
          "signature": "clampToRef(min: number | undefined, max: number | undefined, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the original Color3"
              }
            ]
          },
          "parameters": {
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "defines minimum clamping value (default is 0)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number | undefined"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "defines maximum clamping value (default is 1)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number | undefined"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines color to store the result into"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clamps the rgb values by the min and max values and stores the result into \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 copied the current one"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy the current object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(source: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the updated Color3 object"
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source Color3 object"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the rgb values from the source in the current Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(r: number, g: number, b: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the current Color3 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the Color3 rgb values from the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(otherColor: Color3): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the rgb values are equal to the given ones"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines equality between Color3 objects"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsFloats": {
          "kind": "method",
          "signature": "equalsFloats(r: number, g: number, b: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the rgb values are equal to the given ones"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines equality between the current Color3 object and a set of r,b,g values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines an offset in the source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Vector3 from the starting index of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromHexString": {
          "kind": "method",
          "signature": "static FromHexString(hex: string): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {
            "hex": {
              "name": "hex",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a string containing valid hexadecimal values"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 from the string containing valid hexadecimal values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromInts": {
          "kind": "method",
          "signature": "static FromInts(r: number, g: number, b: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 from integer values (less than 256)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "g": {
          "kind": "property",
          "signature": "g: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the green component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "\"Color3\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the string \"Color3\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "an unique number that can be used to hash Color3 objects"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the Color3 hash code"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Gray": {
          "kind": "method",
          "signature": "static Gray(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a gray color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Green": {
          "kind": "method",
          "signature": "static Green(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a green color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(start: Color3, end: Color3, amount: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start Color3 value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end Color3 value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient value between start and end"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LerpToRef": {
          "kind": "method",
          "signature": "static LerpToRef(left: Color3, right: Color3, amount: number, result: Color3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Magenta": {
          "kind": "method",
          "signature": "static Magenta(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a magenta color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(otherColor: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the new Color3 object"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(otherColor: Color3, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the current Color3"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Purple": {
          "kind": "method",
          "signature": "static Purple(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a purple color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "r": {
          "kind": "property",
          "signature": "r: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the red component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Random": {
          "kind": "method",
          "signature": "static Random(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a random color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Red": {
          "kind": "method",
          "signature": "static Red(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a red color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the updated Color3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies in place each rgb value by scale"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Color3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines color to store the result into"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Color3 values by a factor and add the result to a given Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Color3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the rgb values by scale and stores the result into \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(r: number, g: number, b: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the current Color3 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the Color3 rgb values from the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(otherColor: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the new Color3"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Color3 set with the subtracted values of the given one from the current Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractToRef": {
          "kind": "method",
          "signature": "subtractToRef(otherColor: Color3, result: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Color3"
              }
            ]
          },
          "parameters": {
            "otherColor": {
              "name": "otherColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines Color3 object to store the result into"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Teal": {
          "kind": "method",
          "signature": "static Teal(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a teal color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(array: FloatArray, index?: number): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the current Color3 object"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the array where to store the r,g,b components"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines an optional index in the target array to define where to start storing values"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores in the given array from the given starting index the red, green, blue values as successive elements"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toColor4": {
          "kind": "method",
          "signature": "toColor4(alpha?: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "alpha": {
              "name": "alpha",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component on the new Color4 object (default is 1)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Color4 object from the current Color3 and the given alpha"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toGammaSpace": {
          "kind": "method",
          "signature": "toGammaSpace(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a new Color3 converted from the current one to gamma space"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toGammaSpaceToRef": {
          "kind": "method",
          "signature": "toGammaSpaceToRef(convertedColor: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified Color3"
              }
            ]
          },
          "parameters": {
            "convertedColor": {
              "name": "convertedColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color3 object where to store the gamma space version"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts the Color3 values to gamma space and stores the result in \"convertedColor\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toHexString": {
          "kind": "method",
          "signature": "toHexString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string containing the hexadecimal representation of the Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the Color3 hexadecimal code as a string"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toJSON": {
          "kind": "method",
          "signature": "toJSON(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Serializes Color3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toLinearSpace": {
          "kind": "method",
          "signature": "toLinearSpace(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a new Color3 converted from the current one to linear space"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toLinearSpaceToRef": {
          "kind": "method",
          "signature": "toLinearSpaceToRef(convertedColor: Color3): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified Color3"
              }
            ]
          },
          "parameters": {
            "convertedColor": {
              "name": "convertedColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color3 object where to store the linear space version"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts the Color3 values to linear space and stores the result in \"convertedColor\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toLuminance": {
          "kind": "method",
          "signature": "toLuminance(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "a float value"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the luminance value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string representation of the Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a string with the Color3 current values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "White": {
          "kind": "method",
          "signature": "static White(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a white color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Yellow": {
          "kind": "method",
          "signature": "static Yellow(): Color3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color3",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Color3 value containing a yellow color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Color4": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class used to hold a RBGA color"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    r?: number, \n    g?: number, \n    b?: number, \n    a?: number);",
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component (between 0 and 1, default is 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component (between 0 and 1, default is 1)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 object from red, green, blue values, all between 0 and 1"
            }
          ],
          "remarks": []
        },
        "a": {
          "kind": "property",
          "signature": "a: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the alpha component (between 0 and 1, default is 1)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "add": {
          "kind": "method",
          "signature": "add(right: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 set with the added values of the current Color4 and of the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addInPlace": {
          "kind": "method",
          "signature": "addInPlace(right: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Color4 object"
              }
            ]
          },
          "parameters": {
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds in place the given Color4 values to the current Color4 object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "the new array"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new array populated with 4 numeric elements : red, green, blue, alpha values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "b": {
          "kind": "property",
          "signature": "b: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the blue component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "CheckColors4": {
          "kind": "method",
          "signature": "static CheckColors4(colors: number[], count: number): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "an array containing count * 4 values (RGBA)"
              }
            ]
          },
          "parameters": {
            "colors": {
              "name": "colors",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the array to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number[]"
            },
            "count": {
              "name": "count",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the number of RGBA data to expect"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check the content of a given array and convert it to an array containing RGBA data If the original array was already containing count * 4 values then it is returned directly"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clampToRef": {
          "kind": "method",
          "signature": "clampToRef(min: number | undefined, max: number | undefined, result: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the cuurent Color4"
              }
            ]
          },
          "parameters": {
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "defines minimum clamping value (default is 0)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number | undefined"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "defines maximum clamping value (default is 1)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number | undefined"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines color to store the result into."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clamps the rgb values by the min and max values and stores the result into \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 copied from the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(source: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Color4 object"
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source Color4 object"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given Color4 values into the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(r: number, g: number, b: number, a: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Color4 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given float values into the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 from the starting index element of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromColor3": {
          "kind": "method",
          "signature": "static FromColor3(color3: Color3, alpha?: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "color3": {
              "name": "color3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source Color3 to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color3"
            },
            "alpha": {
              "name": "alpha",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component (1.0 by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 from a Color3 and an alpha value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromHexString": {
          "kind": "method",
          "signature": "static FromHexString(hex: string): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "hex": {
              "name": "hex",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a string containing valid hexadecimal values"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 from the string containing valid hexadecimal values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromInts": {
          "kind": "method",
          "signature": "static FromInts(r: number, g: number, b: number, a: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color3 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component to read from (value between 0 and 255)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color3 from integer values (less than 256)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "g": {
          "kind": "property",
          "signature": "g: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the green component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "\"Color4\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the string \"Color4\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "an unique number that can be used to hash Color4 objects"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the Color4 hash code"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(left: Color4, right: Color4, amount: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LerpToRef": {
          "kind": "method",
          "signature": "static LerpToRef(left: Color4, right: Color4, amount: number, result: Color4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store data"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(color: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "color": {
              "name": "color",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 value to multiply by"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multipy an Color4 value by another and return a new Color4 object"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(color: Color4, result: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the result Color4"
              }
            ]
          },
          "parameters": {
            "color": {
              "name": "color",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 value to multiply by"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 to fill the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multipy a Color4 value by another and push the result in a reference value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "r": {
          "kind": "property",
          "signature": "r: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the red component (between 0 and 1, default is 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 with the current Color4 values multiplied by scale"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Color4"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Color4 values by a factor and add the result to a given Color4"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current unmodified Color4"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current Color4 values by scale and stores the result in \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(r: number, g: number, b: number, a: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Color4 object"
              }
            ]
          },
          "parameters": {
            "r": {
              "name": "r",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the red component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "g": {
              "name": "g",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the green component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the blue component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the alpha component to read from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given float values into the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(right: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Color4 set with the subtracted values of the given one from the current Color4"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractToRef": {
          "kind": "method",
          "signature": "subtractToRef(right: Color4, result: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current Color4 object"
              }
            ]
          },
          "parameters": {
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtracts the given ones from the current Color4 values and stores the results in \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(array: number[], index?: number): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the current Color4 object"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the array where to store the r,g,b components"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number[]"
            },
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines an optional index in the target array to define where to start storing values"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores from the starting index in the given array the Color4 successive values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toGammaSpace": {
          "kind": "method",
          "signature": "toGammaSpace(): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a new Color4 converted from the current one to gamma space"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toGammaSpaceToRef": {
          "kind": "method",
          "signature": "toGammaSpaceToRef(convertedColor: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified Color4"
              }
            ]
          },
          "parameters": {
            "convertedColor": {
              "name": "convertedColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store the gamma space version"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts the Color4 values to gamma space and stores the result in \"convertedColor\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toHexString": {
          "kind": "method",
          "signature": "toHexString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string containing the hexadecimal representation of the Color4 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the Color4 hexadecimal code as a string"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toLinearSpace": {
          "kind": "method",
          "signature": "toLinearSpace(): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "a new Color4 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a new Color4 converted from the current one to linear space"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toLinearSpaceToRef": {
          "kind": "method",
          "signature": "toLinearSpaceToRef(convertedColor: Color4): Color4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Color4",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified Color4"
              }
            ]
          },
          "parameters": {
            "convertedColor": {
              "name": "convertedColor",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Color4 object where to store the linear space version"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Color4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts the Color4 values to linear space and stores the result in \"convertedColor\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string representation of the Color4 object"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a string with the Color4 current values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Component": {
      "kind": "function",
      "signature": "export function Component(componentName: string, classId?: number): <TFunction extends ComponentConstructor<any>>(target: TFunction) => void | TFunction;",
      "returnValue": {
        "type": "<TFunction extends ComponentConstructor<any>>(target: TFunction) => void | TFunction",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "classId": {
          "name": "classId",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ComponentAdded": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(entity: Entity, componentName: string, classId: number | null);",
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            },
            "componentName": {
              "name": "componentName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "classId": {
              "name": "classId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number | null"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ComponentAdded"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "ComponentAdded",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "classId": {
          "kind": "property",
          "signature": "classId: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentName": {
          "kind": "property",
          "signature": "componentName: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entity": {
          "kind": "property",
          "signature": "entity: Entity;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Entity",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ComponentConstructor": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T extends ComponentLike"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__new": {
          "kind": "method",
          "signature": "new (...args: any[]): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "args": {
              "name": "args",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "any[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isComponent": {
          "kind": "property",
          "signature": "isComponent?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "originalClassName": {
          "kind": "property",
          "signature": "originalClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ComponentLike": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ComponentRemoved": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(entity: Entity, componentName: string, component: ComponentLike);",
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            },
            "componentName": {
              "name": "componentName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ComponentLike"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ComponentRemoved"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "ComponentRemoved",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "component": {
          "kind": "property",
          "signature": "component: ComponentLike;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ComponentLike",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentName": {
          "kind": "property",
          "signature": "componentName: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entity": {
          "kind": "property",
          "signature": "entity: Entity;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Entity",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ConeShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "arc": {
          "kind": "property",
          "signature": "arc: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openEnded": {
          "kind": "property",
          "signature": "openEnded: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds two extra faces per subdivision to enclose the cone around its height axis. Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radius": {
          "kind": "property",
          "signature": "radius: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the radius of the top and bottom caps at once."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Properties "
            },
            {
              "kind": "code",
              "text": "radiusTop",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and "
            },
            {
              "kind": "code",
              "text": "radiusBottom",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " are prioritized over this one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radiusBottom": {
          "kind": "property",
          "signature": "radiusBottom: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The radius of the base of the cone. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radiusTop": {
          "kind": "property",
          "signature": "radiusTop: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The radius of the top of a truncated cone. Defaults to 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "segmentsHeight": {
          "kind": "property",
          "signature": "segmentsHeight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the number of rings along the cone height (positive integer). Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "segmentsRadial": {
          "kind": "property",
          "signature": "segmentsRadial: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the number of cone sides (positive integer). Defaults to 36."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Curve3": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. "
        },
        {
          "kind": "web-link",
          "elements": [
            {
              "kind": "text",
              "text": "https://doc.babylonjs.com/how_to/how_to_use_curve3"
            }
          ],
          "targetUrl": "https://doc.babylonjs.com/how_to/how_to_use_curve3"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(points: Vector3[]);",
          "parameters": {
            "points": {
              "name": "points",
              "description": [
                {
                  "kind": "text",
                  "text": "points which make up the curve"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. "
            },
            {
              "kind": "web-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Tutorial"
                }
              ],
              "targetUrl": "http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object"
            }
          ],
          "remarks": []
        },
        "continue": {
          "kind": "method",
          "signature": "continue(curve: Curve3): Curve3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Curve3",
            "description": [
              {
                "kind": "text",
                "text": "the newly constructed curve"
              }
            ]
          },
          "parameters": {
            "curve": {
              "name": "curve",
              "description": [
                {
                  "kind": "text",
                  "text": "the curve to continue from this curve"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Curve3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of Curve3 object : var curve = curveA.continue(curveB); This new Curve3 is built by translating and sticking the curveB at the end of the curveA. curveA and curveB keep unchanged."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CreateCatmullRomSpline": {
          "kind": "method",
          "signature": "static CreateCatmullRomSpline(points: Vector3[], nbPoints: number, closed?: boolean): Curve3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Curve3",
            "description": [
              {
                "kind": "text",
                "text": "the created Curve3"
              }
            ]
          },
          "parameters": {
            "points": {
              "name": "points",
              "description": [
                {
                  "kind": "text",
                  "text": "(array of Vector3) the points the spline must pass through. At least, four points required"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3[]"
            },
            "nbPoints": {
              "name": "nbPoints",
              "description": [
                {
                  "kind": "text",
                  "text": "(integer) the wanted number of points between each curve control points"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "closed": {
              "name": "closed",
              "description": [
                {
                  "kind": "text",
                  "text": "(boolean) optional with default false, when true forms a closed loop from the points"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Curve3 object along a CatmullRom Spline curve :"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CreateCubicBezier": {
          "kind": "method",
          "signature": "static CreateCubicBezier(v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, nbPoints: number): Curve3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Curve3",
            "description": [
              {
                "kind": "text",
                "text": "the created Curve3"
              }
            ]
          },
          "parameters": {
            "v0": {
              "name": "v0",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the origin point of the Cubic Bezier"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "v1": {
              "name": "v1",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the first control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "v2": {
              "name": "v2",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the second control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "v3": {
              "name": "v3",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the end point of the Cubic Bezier"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "nbPoints": {
              "name": "nbPoints",
              "description": [
                {
                  "kind": "text",
                  "text": "(integer) the wanted number of points in the curve"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CreateHermiteSpline": {
          "kind": "method",
          "signature": "static CreateHermiteSpline(p1: Vector3, t1: Vector3, p2: Vector3, t2: Vector3, nbPoints: number): Curve3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Curve3",
            "description": [
              {
                "kind": "text",
                "text": "the created Curve3"
              }
            ]
          },
          "parameters": {
            "p1": {
              "name": "p1",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the origin point of the Hermite Spline"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "t1": {
              "name": "t1",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the tangent vector at the origin point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "p2": {
              "name": "p2",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the end point of the Hermite Spline"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "t2": {
              "name": "t2",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the tangent vector at the end point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "nbPoints": {
              "name": "nbPoints",
              "description": [
                {
                  "kind": "text",
                  "text": "(integer) the wanted number of points in the curve"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CreateQuadraticBezier": {
          "kind": "method",
          "signature": "static CreateQuadraticBezier(v0: Vector3, v1: Vector3, v2: Vector3, nbPoints: number): Curve3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Curve3",
            "description": [
              {
                "kind": "text",
                "text": "the created Curve3"
              }
            ]
          },
          "parameters": {
            "v0": {
              "name": "v0",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the origin point of the Quadratic Bezier"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "v1": {
              "name": "v1",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "v2": {
              "name": "v2",
              "description": [
                {
                  "kind": "text",
                  "text": "(Vector3) the end point of the Quadratic Bezier"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "nbPoints": {
              "name": "nbPoints",
              "description": [
                {
                  "kind": "text",
                  "text": "(integer) the wanted number of points in the curve"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getPoints": {
          "kind": "method",
          "signature": "getPoints(): Vector3[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3[]",
            "description": [
              {
                "kind": "text",
                "text": "the Curve3 stored array of successive Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "method",
          "signature": "length(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the computed length (float) of the curve."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CylinderShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "arc": {
          "kind": "property",
          "signature": "arc: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openEnded": {
          "kind": "property",
          "signature": "openEnded: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds two extra faces per subdivision to enclose the cylinder around its height axis. Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radius": {
          "kind": "property",
          "signature": "radius: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the radius of the top and bottom caps at once."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Properties "
            },
            {
              "kind": "code",
              "text": "radiusTop",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and "
            },
            {
              "kind": "code",
              "text": "radiusBottom",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " are prioritized over this one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radiusBottom": {
          "kind": "property",
          "signature": "radiusBottom: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The radius of the base of the cylinder. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "radiusTop": {
          "kind": "property",
          "signature": "radiusTop: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The radius of the top of the cylinder. Defaults to 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "segmentsHeight": {
          "kind": "property",
          "signature": "segmentsHeight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the number of rings along the cylinder height (positive integer). Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "segmentsRadial": {
          "kind": "property",
          "signature": "segmentsRadial: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the number of cylinder sides (positive integer). Defaults to 36."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DisposableComponent": {
      "kind": "function",
      "signature": "export function DisposableComponent(componentName: string, classId: number): <TFunction extends DisposableComponentConstructor<any>>(target: TFunction) => void | TFunction;",
      "returnValue": {
        "type": "<TFunction extends DisposableComponentConstructor<any>>(target: TFunction) => void | TFunction",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "classId": {
          "name": "classId",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "DisposableComponentConstructor": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T extends DisposableComponentLike"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__new": {
          "kind": "method",
          "signature": "new (...args: any[]): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "args": {
              "name": "args",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "any[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isComponent": {
          "kind": "property",
          "signature": "isComponent?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisposableComponent": {
          "kind": "property",
          "signature": "isDisposableComponent?: true;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "true",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "originalClassName": {
          "kind": "property",
          "signature": "originalClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DisposableComponentCreated": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(componentId: string, componentName: string, classId: number);",
          "parameters": {
            "componentId": {
              "name": "componentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "componentName": {
              "name": "componentName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "classId": {
              "name": "classId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DisposableComponentCreated"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "DisposableComponentCreated",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "classId": {
          "kind": "property",
          "signature": "classId: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentId": {
          "kind": "property",
          "signature": "componentId: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentName": {
          "kind": "property",
          "signature": "componentName: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DisposableComponentLike": {
      "kind": "interface",
      "extends": "ComponentLike",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onDispose": {
          "kind": "method",
          "signature": "onDispose?(): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DisposableComponentRemoved": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(componentId: string);",
          "parameters": {
            "componentId": {
              "name": "componentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DisposableComponentRemoved"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "DisposableComponentRemoved",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentId": {
          "kind": "property",
          "signature": "componentId: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DisposableComponentUpdated": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(componentId: string, component: DisposableComponentLike);",
          "parameters": {
            "componentId": {
              "name": "componentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DisposableComponentLike"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DisposableComponentUpdated"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "DisposableComponentUpdated",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "component": {
          "kind": "property",
          "signature": "component: DisposableComponentLike;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DisposableComponentLike",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentId": {
          "kind": "property",
          "signature": "componentId: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Engine": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor();",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Engine"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "Engine",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "addEntity": {
          "kind": "method",
          "signature": "addEntity(entity: Entity): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addSystem": {
          "kind": "method",
          "signature": "addSystem(system: ISystem, priority?: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "system": {
              "name": "system",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISystem"
            },
            "priority": {
              "name": "priority",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "disposableComponents": {
          "kind": "property",
          "signature": "readonly disposableComponents: Readonly<Record<string, DisposableComponentLike>>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<Record<string, DisposableComponentLike>>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disposeComponent": {
          "kind": "method",
          "signature": "disposeComponent(component: DisposableComponentLike): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DisposableComponentLike"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "entities": {
          "kind": "property",
          "signature": "readonly entities: Readonly<Record<string, Entity>>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<Record<string, Entity>>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "eventManager": {
          "kind": "property",
          "signature": "readonly eventManager: EventManager;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "EventManager",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getComponentGroup": {
          "kind": "method",
          "signature": "getComponentGroup(...requires: ComponentConstructor<any>[]): ComponentGroup;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ComponentGroup",
            "description": []
          },
          "parameters": {
            "requires": {
              "name": "requires",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "ComponentConstructor<any>[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getEntitiesWithComponent": {
          "kind": "method",
          "signature": "getEntitiesWithComponent(component: string): Record<string, any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Record<string, any>",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "registerComponent": {
          "kind": "method",
          "signature": "registerComponent(component: DisposableComponentLike): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DisposableComponentLike"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeComponentGroup": {
          "kind": "method",
          "signature": "removeComponentGroup(componentGroup: ComponentGroup): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "componentGroup": {
              "name": "componentGroup",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ComponentGroup"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeEntity": {
          "kind": "method",
          "signature": "removeEntity(entity: Entity, removeChildren?: boolean, newParent?: Entity): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            },
            "removeChildren": {
              "name": "removeChildren",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "newParent": {
              "name": "newParent",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeSystem": {
          "kind": "method",
          "signature": "removeSystem(system: ISystem): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "system": {
              "name": "system",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISystem"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rootEntity": {
          "kind": "property",
          "signature": "readonly rootEntity: Entity;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Entity",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "update": {
          "kind": "method",
          "signature": "update(dt: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "dt": {
              "name": "dt",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateComponent": {
          "kind": "method",
          "signature": "updateComponent(component: DisposableComponentLike): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DisposableComponentLike"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Entity": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(name?: string | undefined);",
          "parameters": {
            "name": {
              "name": "name",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string | undefined"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Entity"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "Entity",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "addComponent": {
          "kind": "method",
          "signature": "addComponent<T extends object>(component: T): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component instance."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds a component. If the component already exist, it throws an Error."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addComponentOrReplace": {
          "kind": "method",
          "signature": "addComponentOrReplace<T extends object>(component: T): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component instance."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds or replaces a component in the entity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "alive": {
          "kind": "property",
          "signature": "alive: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "children": {
          "kind": "property",
          "signature": "children: Record<string, Entity>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Record<string, Entity>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "components": {
          "kind": "property",
          "signature": "readonly components: Record<string, any>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Record<string, any>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "eventManager": {
          "kind": "property",
          "signature": "eventManager: EventManager | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "EventManager | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getComponent": {
          "kind": "method",
          "signature": "getComponent<T = any>(component: string): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component class or name"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a component, if it doesn't exist, it throws an Error."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getComponentOrCreate": {
          "kind": "method",
          "signature": "getComponentOrCreate<T>(component: ComponentConstructor<T> & {\n        new (): T;\n    }): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component class"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ComponentConstructor<T> & {\n        new (): T;\n    }"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a component, if it doesn't exist, it creates the component and returns it."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getComponentOrNull": {
          "kind": "method",
          "signature": "getComponentOrNull<T = any>(component: string): T | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T | null",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component class or name"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a component, if it doesn't exist, it returns null."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getParent": {
          "kind": "method",
          "signature": "getParent(): Entity | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Entity | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the parent entity"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasComponent": {
          "kind": "method",
          "signature": "hasComponent<T = any>(component: string): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component class, instance or name"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a boolean indicating if a component is present in the entity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isAddedToEngine": {
          "kind": "method",
          "signature": "isAddedToEngine(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the entity is already added to the engine. Returns false if no engine was defined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeComponent": {
          "kind": "method",
          "signature": "removeComponent(component: string, triggerRemovedEvent?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "component": {
              "name": "component",
              "description": [
                {
                  "kind": "text",
                  "text": "component instance to remove"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "triggerRemovedEvent": {
              "name": "triggerRemovedEvent",
              "description": [
                {
                  "kind": "text",
                  "text": "should this action trigger an event?"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Removes a component instance from the entity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setParent": {
          "kind": "method",
          "signature": "setParent(newParent: Entity): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newParent": {
              "name": "newParent",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the parent entity"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "uuid": {
          "kind": "property",
          "signature": "readonly uuid: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "error": {
      "kind": "function",
      "signature": "export function error(error: string | Error, data?: any): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "error": {
          "name": "error",
          "description": [
            {
              "kind": "text",
              "text": "string or Error object."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string | Error"
        },
        "data": {
          "name": "data",
          "description": [
            {
              "kind": "text",
              "text": "any debug information."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "any"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Error function. Prints a console error. Only works in debug mode, otherwise it does nothing."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "executeTask": {
      "kind": "function",
      "signature": "export function executeTask<T>(task: () => Promise<T>): TaskResult<T>;",
      "returnValue": {
        "type": "TaskResult<T>",
        "description": []
      },
      "parameters": {
        "task": {
          "name": "task",
          "description": [
            {
              "kind": "text",
              "text": "the task to execute"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "() => Promise<T>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Executes an asynchronous task"
        }
      ],
      "remarks": [],
      "isBeta": true
    },
    "Frustum": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Reprasents a camera frustum"
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "GetBottomPlaneToRef": {
          "kind": "method",
          "signature": "static GetBottomPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the bottom frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetFarPlaneToRef": {
          "kind": "method",
          "signature": "static GetFarPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the far frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetLeftPlaneToRef": {
          "kind": "method",
          "signature": "static GetLeftPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the left frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetNearPlaneToRef": {
          "kind": "method",
          "signature": "static GetNearPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the near frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetPlanes": {
          "kind": "method",
          "signature": "static GetPlanes(transform: Matrix): Plane[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Plane[]",
            "description": [
              {
                "kind": "text",
                "text": "a new array of 6 Frustum planes computed by the given transformation matrix."
              }
            ]
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "matrix to be applied to the returned planes"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the planes representing the frustum"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetPlanesToRef": {
          "kind": "method",
          "signature": "static GetPlanesToRef(transform: Matrix, frustumPlanes: Plane[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum planes"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlanes": {
              "name": "frustumPlanes",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum planes"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetRightPlaneToRef": {
          "kind": "method",
          "signature": "static GetRightPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the right frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetTopPlaneToRef": {
          "kind": "method",
          "signature": "static GetTopPlaneToRef(transform: Matrix, frustumPlane: Plane): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transform": {
              "name": "transform",
              "description": [
                {
                  "kind": "text",
                  "text": "transformation matrix to be applied to the resulting frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "frustumPlane": {
              "name": "frustumPlane",
              "description": [
                {
                  "kind": "text",
                  "text": "the resuling frustum plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the top frustum plane transformed by the transform matrix"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "getComponentClassId": {
      "kind": "function",
      "signature": "export function getComponentClassId<T extends Record<any, any> = any>(component: T | ComponentConstructor<T>): number | null;",
      "returnValue": {
        "type": "number | null",
        "description": []
      },
      "parameters": {
        "component": {
          "name": "component",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "T | ComponentConstructor<T>"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getComponentId": {
      "kind": "function",
      "signature": "export function getComponentId<T extends DisposableComponentLike>(component: T): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "component": {
          "name": "component",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getComponentName": {
      "kind": "function",
      "signature": "export function getComponentName<T extends Record<any, any> = any>(component: T | ComponentConstructor<T>): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "component": {
          "name": "component",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "T | ComponentConstructor<T>"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Gizmo": {
      "kind": "enum",
      "values": {
        "MOVE": {
          "kind": "enum value",
          "value": "\"MOVE\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": true
        },
        "NONE": {
          "kind": "enum value",
          "value": "\"NONE\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": true
        },
        "ROTATE": {
          "kind": "enum value",
          "value": "\"ROTATE\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": true
        },
        "SCALE": {
          "kind": "enum value",
          "value": "\"SCALE\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": true
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gizmo identifiers"
        }
      ],
      "remarks": [],
      "isBeta": true
    },
    "Gizmos": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "cycle": {
          "kind": "property",
          "signature": "cycle: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Cycle through gizmos using click."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "localReference": {
          "kind": "property",
          "signature": "localReference: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Align the gizmos to match the local reference system"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "position": {
          "kind": "property",
          "signature": "position: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enable position gizmo"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotation": {
          "kind": "property",
          "signature": "rotation: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enable rotation gizmo"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scale": {
          "kind": "property",
          "signature": "scale: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enable scale gizmo"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedGizmo": {
          "kind": "property",
          "signature": "selectedGizmo?: Gizmo;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Gizmo",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If cycle is false, this will be the selected gizmo"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "GLTFShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(src: string);",
          "parameters": {
            "src": {
              "name": "src",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "GLTFShape"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "GLTFShape",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "src": {
          "kind": "property",
          "signature": "readonly src: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IEvents": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "chatMessage": {
          "kind": "property",
          "signature": "chatMessage:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        id: string;\n        sender: string;\n        message: string;\n        isCommand: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "chatMessage",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when the user sends a message through chat entity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entitiesOutOfBoundaries": {
          "kind": "property",
          "signature": "entitiesOutOfBoundaries:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        entities: string[];\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "After checking entities outside the fences, if any is outside, this event will be triggered with all the entities outside the scene."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entityBackInScene": {
          "kind": "property",
          "signature": "entityBackInScene:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        entityId: string;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This event gets triggered when an entity enters the scene fences."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entityOutOfScene": {
          "kind": "property",
          "signature": "entityOutOfScene:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        entityId: string;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This event gets triggered when an entity leaves the scene fences."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "gizmoEvent": {
          "kind": "property",
          "signature": "gizmoEvent: GizmoDragEndEvent | GizmoSelectedEvent;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "GizmoDragEndEvent | GizmoSelectedEvent",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "For gizmos"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "limitsExceeded": {
          "kind": "property",
          "signature": "limitsExceeded:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        given: Record<string, number>;\n        limit: Record<string, number>;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "metricsUpdate": {
          "kind": "property",
          "signature": "metricsUpdate:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        given: Record<string, number>;\n        limit: Record<string, number>;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** ID of the entitiy of the event */\n        entityId: string;\n        /** ID of the pointer that triggered the event */\n        pointerId: number;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "onBlur",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when an entity loses its focus. Dispatched by the "
            },
            {
              "kind": "code",
              "text": "ui-input",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and "
            },
            {
              "kind": "code",
              "text": "ui-password",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " entities when the value is changed. It triggers a callback."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Notice: Only entities with ID will be listening for click events."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        value?: any;\n        /** ID of the pointer that triggered the event */\n        pointerId?: number;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when an entity changes its own internal state. Dispatched by the "
            },
            {
              "kind": "code",
              "text": "ui-*",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " entities when their value is changed. It triggers a callback. Notice: Only entities with ID will be listening for click events."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        entityId: string;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The onClick event is only used for UI elements"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** ID of the entitiy of the event */\n        entityId: string;\n        /** ID of the pointer that triggered the event */\n        pointerId: number;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "onFocus",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when an entity focus is active. Dispatched by the "
            },
            {
              "kind": "code",
              "text": "ui-input",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and "
            },
            {
              "kind": "code",
              "text": "ui-password",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " entities when the value is changed. It triggers a callback."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Notice: Only entities with ID will be listening for click events."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pointerDown": {
          "kind": "property",
          "signature": "pointerDown: PointerEvent;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PointerEvent",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "pointerDown",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when the user press an input pointer. It could be a VR controller, a touch screen or the mouse."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pointerUp": {
          "kind": "property",
          "signature": "pointerUp: PointerEvent;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PointerEvent",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "pointerUp",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when the user releases an input pointer. It could be a VR controller, a touch screen or the mouse."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positionChanged": {
          "kind": "property",
          "signature": "positionChanged:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** Position relative to the base parcel of the scene */\n        position: ReadOnlyVector3;\n        /** Camera position, this is a absolute world position */\n        cameraPosition: ReadOnlyVector3;\n        /** Eye height, in meters. */\n        playerHeight: number;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "positionChanged",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when the position of the camera changes This event is throttled to 10 times per second."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotationChanged": {
          "kind": "property",
          "signature": "rotationChanged:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** Degree vector. Same as entities */\n        rotation: ReadOnlyVector3;\n        /** Rotation quaternion, useful in some scenarios. */\n        quaternion: ReadOnlyQuaternion;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "code",
              "text": "rotationChanged",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " is triggered when the rotation of the camera changes. This event is throttled to 10 times per second."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "uuidEvent": {
          "kind": "property",
          "signature": "uuidEvent:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        uuid: string;\n        payload: any;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Input": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ensureInstance": {
          "kind": "method",
          "signature": "static ensureInstance(): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "instance": {
          "kind": "property",
          "signature": "static readonly instance: Input;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "Input",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "state": {
          "kind": "property",
          "signature": "readonly state: Readonly<InputState>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<InputState>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subscribe": {
          "kind": "method",
          "signature": "subscribe(eventName: InputEventKind, fn: (e: LocalPointerEvent) => void): () => void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "() => void",
            "description": []
          },
          "parameters": {
            "eventName": {
              "name": "eventName",
              "description": [
                {
                  "kind": "text",
                  "text": "The name of the event (see InputEventKind)."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "InputEventKind"
            },
            "fn": {
              "name": "fn",
              "description": [
                {
                  "kind": "text",
                  "text": "A callback function to be called when the event is triggered."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(e: LocalPointerEvent) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subscribes to an input event and triggers the provided callback."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Returns a function that can be called to remove the subscription."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unsubscribe": {
          "kind": "method",
          "signature": "unsubscribe(eventName: InputEventKind, fn: (e: LocalPointerEvent) => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "eventName": {
              "name": "eventName",
              "description": [
                {
                  "kind": "text",
                  "text": "The name of the event (see InputEventKind)."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "InputEventKind"
            },
            "fn": {
              "name": "fn",
              "description": [
                {
                  "kind": "text",
                  "text": "The callback function used when subscribing to the event."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(e: LocalPointerEvent) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Removes an existing input event subscription."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "isDisposableComponent": {
      "kind": "function",
      "signature": "export function isDisposableComponent(component: ComponentLike): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "component": {
          "name": "component",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ComponentLike"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ISize": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Interface for the size containing width and height"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Heighht"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISystem": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activate": {
          "kind": "method",
          "signature": "activate?(engine: Engine): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "engine": {
              "name": "engine",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Engine"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "active": {
          "kind": "property",
          "signature": "active?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "deactivate": {
          "kind": "method",
          "signature": "deactivate?(): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onAddEntity": {
          "kind": "method",
          "signature": "onAddEntity?(entity: Entity): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onRemoveEntity": {
          "kind": "method",
          "signature": "onRemoveEntity?(entity: Entity): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "update": {
          "kind": "method",
          "signature": "update?(dt: number): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "dt": {
              "name": "dt",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "log": {
      "kind": "function",
      "signature": "export function log(...args: any[]): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "args": {
          "name": "args",
          "description": [
            {
              "kind": "text",
              "text": "any loggable parameter"
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "any[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Log function. Only works in debug mode, otherwise it does nothing."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Material": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "albedoColor": {
          "kind": "property",
          "signature": "albedoColor?: Color3;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "AKA Diffuse Color in other nomenclature. Defaults to #CCCCCC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "albedoTexture": {
          "kind": "property",
          "signature": "albedoTexture?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Texture applied as material."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "alpha": {
          "kind": "property",
          "signature": "alpha?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Opacity level between 0 and 1. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "alphaTexture": {
          "kind": "property",
          "signature": "alphaTexture?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Texture applied as opacity. Default: the same texture used in albedoTexture."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ambientColor": {
          "kind": "property",
          "signature": "ambientColor?: Color3;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "AKA Diffuse Color in other nomenclature. Defaults to black."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bumpTexture": {
          "kind": "property",
          "signature": "bumpTexture?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores surface normal data used to displace a mesh in a texture."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directIntensity": {
          "kind": "property",
          "signature": "directIntensity?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Intensity of the direct lights e.g. the four lights available in scene. This impacts both the direct diffuse and specular highlights. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableLighting": {
          "kind": "property",
          "signature": "disableLighting?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If sets to true, disables all the lights affecting the material. Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "emissiveColor": {
          "kind": "property",
          "signature": "emissiveColor?: Color3;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color emitted from the material. Defaults to black."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "emissiveIntensity": {
          "kind": "property",
          "signature": "emissiveIntensity?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Intensity of the emissive part of the material. This helps controlling the emissive effect without modifying the emissive color. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "emissiveTexture": {
          "kind": "property",
          "signature": "emissiveTexture?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Emissive texture."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "environmentIntensity": {
          "kind": "property",
          "signature": "environmentIntensity?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Intensity of the environment e.g. how much the environment will light the object either through harmonics for rough material or through the refelction for shiny ones. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasAlpha": {
          "kind": "property",
          "signature": "hasAlpha?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Does the albedo texture has alpha? Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "metallic": {
          "kind": "property",
          "signature": "metallic?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the metallic scalar of the metallic/roughness workflow. Can also be used to scale the metalness values of the metallic texture. Defaults to 0.5."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "microSurface": {
          "kind": "property",
          "signature": "microSurface?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "AKA Glossiness in other nomenclature. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "reflectionColor": {
          "kind": "property",
          "signature": "reflectionColor?: Color3;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color reflected from the material. Defaults to white."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "reflectivityColor": {
          "kind": "property",
          "signature": "reflectivityColor?: Color3;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "AKA Specular Color in other nomenclature. Defaults to white."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "refractionTexture": {
          "kind": "property",
          "signature": "refractionTexture?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores the refracted light information in a texture."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "roughness": {
          "kind": "property",
          "signature": "roughness?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the roughness scalar of the metallic/roughness workflow. Can also be used to scale the roughness values of the metallic texture. Defaults to 0.5."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "specularIntensity": {
          "kind": "property",
          "signature": "specularIntensity?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This is a special control allowing the reduction of the specular highlights coming from the four lights of the scene. Those highlights may not be needed in full environment lighting. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "transparencyMode": {
          "kind": "property",
          "signature": "transparencyMode?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the transparency mode of the material. Defauts to 0."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "| Value | Type | | ----- | ----------------------------------- | | 0 | OPAQUE (default) | | 1 | ALPHATEST | | 2 | ALPHABLEND | | 3 | ALPHATESTANDBLEND |"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Matrix": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class used to store matrix data (4x4)"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor();",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an empty matrix (filled with zeros)"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(other: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as the addition of the current matrix and the given one"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds the current matrix with a second one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addAtIndex": {
          "kind": "method",
          "signature": "addAtIndex(index: number, value: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "the index of the value within the matrix. between 0 and 15."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "the value to be added"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "add a value at the specified position in the current Matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToRef": {
          "kind": "method",
          "signature": "addToRef(other: Matrix, result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given matrix \"result\" to the addition of the current matrix and the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToSelf": {
          "kind": "method",
          "signature": "addToSelf(other: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds in place the given matrix to the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): Readonly<FloatArray>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Readonly<FloatArray>",
            "description": [
              {
                "kind": "text",
                "text": "the matrix underlying array."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the matrix as a FloatArray"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix from the current matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clone the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Compose": {
          "kind": "method",
          "signature": "static Compose(scale: Vector3, rotation: Quaternion, translation: Vector3): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "rotation": {
              "name": "rotation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            },
            "translation": {
              "name": "translation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ComposeToRef": {
          "kind": "method",
          "signature": "static ComposeToRef(scale: Vector3, rotation: Quaternion, translation: Vector3, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "rotation": {
              "name": "rotation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            },
            "translation": {
              "name": "translation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(other: Readonly<Matrix>): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy the current matrix from the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyToArray": {
          "kind": "method",
          "signature": "copyToArray(array: FloatArray, offset?: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the target array where to start storing values"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Populates the given array from the starting index with the current matrix values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "decompose": {
          "kind": "method",
          "signature": "decompose(scale?: Vector3, rotation?: Quaternion, translation?: Vector3): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if operation was successful"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale vector3 given as a reference to update"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Vector3"
            },
            "rotation": {
              "name": "rotation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation quaternion given as a reference to update"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Quaternion"
            },
            "translation": {
              "name": "translation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation vector3 given as a reference to update"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decomposes the current Matrix into a translation, rotation and scaling components"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DecomposeLerp": {
          "kind": "method",
          "signature": "static DecomposeLerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "startValue": {
              "name": "startValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "endValue": {
              "name": "endValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "gradient": {
              "name": "gradient",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient between the two matrices"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Builds a new matrix whose values are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DecomposeLerpToRef": {
          "kind": "method",
          "signature": "static DecomposeLerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "startValue": {
              "name": "startValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "endValue": {
              "name": "endValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "gradient": {
              "name": "gradient",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient between the two matrices"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Update a matrix to values which are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "determinant": {
          "kind": "method",
          "signature": "determinant(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the matrix determinant"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the determinant of the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(value: Matrix): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true is the current matrix and the given one values are strictly equal"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second matrix to compare"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check equality between this matrix and a second one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new Matrix set from the starting index of the given array"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines an offset in the source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a matrix from an array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArrayToRef": {
          "kind": "method",
          "signature": "static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines an offset in the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy the content of an array into a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatArrayToRefScaled": {
          "kind": "method",
          "signature": "static FromFloatArrayToRefScaled(array: FloatArray, offset: number, scale: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores an array into a matrix after having multiplied each component by a given factor"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromQuaternionToRef": {
          "kind": "method",
          "signature": "static FromQuaternionToRef(quat: Quaternion, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "quat": {
              "name": "quat",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the quaternion to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation matrix from a quaternion and stores it in a target matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromValues": {
          "kind": "method",
          "signature": "static FromValues(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "initialM11": {
              "name": "initialM11",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM12": {
              "name": "initialM12",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM13": {
              "name": "initialM13",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM14": {
              "name": "initialM14",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM21": {
              "name": "initialM21",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM22": {
              "name": "initialM22",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM23": {
              "name": "initialM23",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM24": {
              "name": "initialM24",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM31": {
              "name": "initialM31",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM32": {
              "name": "initialM32",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM33": {
              "name": "initialM33",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM34": {
              "name": "initialM34",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM41": {
              "name": "initialM41",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM42": {
              "name": "initialM42",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM43": {
              "name": "initialM43",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM44": {
              "name": "initialM44",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates new matrix from a list of values (16)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromValuesToRef": {
          "kind": "method",
          "signature": "static FromValuesToRef(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "initialM11": {
              "name": "initialM11",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM12": {
              "name": "initialM12",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM13": {
              "name": "initialM13",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM14": {
              "name": "initialM14",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 1st row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM21": {
              "name": "initialM21",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM22": {
              "name": "initialM22",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM23": {
              "name": "initialM23",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM24": {
              "name": "initialM24",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 2nd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM31": {
              "name": "initialM31",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM32": {
              "name": "initialM32",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM33": {
              "name": "initialM33",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM34": {
              "name": "initialM34",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 3rd row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM41": {
              "name": "initialM41",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM42": {
              "name": "initialM42",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM43": {
              "name": "initialM43",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "initialM44": {
              "name": "initialM44",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th value of 4th row"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a list of values (16) inside a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromXYZAxesToRef": {
          "kind": "method",
          "signature": "static FromXYZAxesToRef(xaxis: Vector3, yaxis: Vector3, zaxis: Vector3, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "xaxis": {
              "name": "xaxis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the value of the 1st axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "yaxis": {
              "name": "yaxis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the value of the 2nd axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "zaxis": {
              "name": "zaxis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the value of the 3rd axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given matrix as a rotation matrix composed from the 3 left handed axes"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetAsMatrix2x2": {
          "kind": "method",
          "signature": "static GetAsMatrix2x2(matrix: Matrix): FloatArray;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "FloatArray",
            "description": [
              {
                "kind": "text",
                "text": "a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetAsMatrix3x3": {
          "kind": "method",
          "signature": "static GetAsMatrix3x3(matrix: Matrix): FloatArray;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "FloatArray",
            "description": [
              {
                "kind": "text",
                "text": "a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Matrix\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the name of the current matrix class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the hash code"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the hash code of the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getRotationMatrix": {
          "kind": "method",
          "signature": "getRotationMatrix(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix sets to the extracted rotation matrix from the current one"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets only rotation part of the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getRotationMatrixToRef": {
          "kind": "method",
          "signature": "getRotationMatrixToRef(result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix to store data to"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extracts the rotation matrix from the current one and sets it as the given \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getRow": {
          "kind": "method",
          "signature": "getRow(index: number): Nullable<Vector4>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Nullable<Vector4>",
            "description": [
              {
                "kind": "text",
                "text": "the index-th row of the current matrix as a new Vector4"
              }
            ]
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the number of the row to get"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets specific row of the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getTranslation": {
          "kind": "method",
          "signature": "getTranslation(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3 as the extracted translation from the matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the translation value of the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getTranslationToRef": {
          "kind": "method",
          "signature": "getTranslationToRef(result: Vector3): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the translation"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Fill a Vector3 with the extracted translation from the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Identity": {
          "kind": "method",
          "signature": "static Identity(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new identity matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new identity matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "IdentityReadOnly": {
          "kind": "property",
          "signature": "static readonly IdentityReadOnly: Readonly<Matrix>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "Readonly<Matrix>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets an identity matrix that must not be updated"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "IdentityToRef": {
          "kind": "method",
          "signature": "static IdentityToRef(result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new identity matrix and stores the result in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "invert": {
          "kind": "method",
          "signature": "invert(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current inverted matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inverts the current matrix in place"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Invert": {
          "kind": "method",
          "signature": "static Invert(source: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new matrix as the invert of a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "invertToRef": {
          "kind": "method",
          "signature": "invertToRef(other: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given matrix to the current inverted Matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isIdentity": {
          "kind": "method",
          "signature": "isIdentity(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true is the matrix is the identity matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check if the current matrix is identity"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isIdentityAs3x2": {
          "kind": "method",
          "signature": "isIdentityAs3x2(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true is the matrix is the identity matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "startValue": {
              "name": "startValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "endValue": {
              "name": "endValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "gradient": {
              "name": "gradient",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LerpToRef": {
          "kind": "method",
          "signature": "static LerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "startValue": {
              "name": "startValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "endValue": {
              "name": "endValue",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "gradient": {
              "name": "gradient",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Matrix object where to store data"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LookAtLH": {
          "kind": "method",
          "signature": "static LookAtLH(eye: Vector3, target: Vector3, up: Vector3): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "eye": {
              "name": "eye",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the final position of the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines where the entity should look at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the up vector for the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in left handed mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LookAtLHToRef": {
          "kind": "method",
          "signature": "static LookAtLHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "eye": {
              "name": "eye",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the final position of the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines where the entity should look at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the up vector for the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in left handed mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LookAtRH": {
          "kind": "method",
          "signature": "static LookAtRH(eye: Vector3, target: Vector3, up: Vector3): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "eye": {
              "name": "eye",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the final position of the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines where the entity should look at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the up vector for the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in right handed mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LookAtRHToRef": {
          "kind": "method",
          "signature": "static LookAtRHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "eye": {
              "name": "eye",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the final position of the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines where the entity should look at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the up vector for the entity"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in right handed mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "m": {
          "kind": "property",
          "signature": "readonly m: Readonly<FloatArray>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<FloatArray>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the internal data of the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(other: Readonly<Matrix>): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix set with the multiplication result of the current Matrix and the given one"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiply two matrices"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyAtIndex": {
          "kind": "method",
          "signature": "multiplyAtIndex(index: number, value: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "the index of the value within the matrix. between 0 and 15."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "the value to be added"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "mutiply the specified position in the current Matrix by a value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToArray": {
          "kind": "method",
          "signature": "multiplyToArray(other: Readonly<Matrix>, result: FloatArray, offset: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the array where to store the multiplication"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the target array where to start storing values"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(other: Readonly<Matrix>, result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix where to store the multiplication"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoLH": {
          "kind": "method",
          "signature": "static OrthoLH(width: number, height: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a left-handed orthographic projection matrix"
              }
            ]
          },
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport width"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport height"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a left-handed orthographic projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoLHToRef": {
          "kind": "method",
          "signature": "static OrthoLHToRef(width: number, height: number, znear: number, zfar: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport width"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport height"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Store a left-handed orthographic projection to a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoOffCenterLH": {
          "kind": "method",
          "signature": "static OrthoOffCenterLH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a left-handed orthographic projection matrix"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport left coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport right coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "bottom": {
              "name": "bottom",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport bottom coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "top": {
              "name": "top",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport top coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a left-handed orthographic projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoOffCenterLHToRef": {
          "kind": "method",
          "signature": "static OrthoOffCenterLHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport left coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport right coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "bottom": {
              "name": "bottom",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport bottom coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "top": {
              "name": "top",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport top coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a left-handed orthographic projection into a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoOffCenterRH": {
          "kind": "method",
          "signature": "static OrthoOffCenterRH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a right-handed orthographic projection matrix"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport left coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport right coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "bottom": {
              "name": "bottom",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport bottom coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "top": {
              "name": "top",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport top coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a right-handed orthographic projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "OrthoOffCenterRHToRef": {
          "kind": "method",
          "signature": "static OrthoOffCenterRHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport left coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport right coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "bottom": {
              "name": "bottom",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport bottom coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "top": {
              "name": "top",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport top coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a right-handed orthographic projection into a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveFovLH": {
          "kind": "method",
          "signature": "static PerspectiveFovLH(fov: number, aspect: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a left-handed perspective projection matrix"
              }
            ]
          },
          "parameters": {
            "fov": {
              "name": "fov",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the horizontal field of view"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "aspect": {
              "name": "aspect",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the aspect ratio"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a left-handed perspective projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveFovLHToRef": {
          "kind": "method",
          "signature": "static PerspectiveFovLHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fov": {
              "name": "fov",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the horizontal field of view"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "aspect": {
              "name": "aspect",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the aspect ratio"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "isVerticalFovFixed": {
              "name": "isVerticalFovFixed",
              "description": [
                {
                  "kind": "text",
                  "text": "defines it the fov is vertically fixed (default) or horizontally"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a left-handed perspective projection into a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveFovRH": {
          "kind": "method",
          "signature": "static PerspectiveFovRH(fov: number, aspect: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a right-handed perspective projection matrix"
              }
            ]
          },
          "parameters": {
            "fov": {
              "name": "fov",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the horizontal field of view"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "aspect": {
              "name": "aspect",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the aspect ratio"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a right-handed perspective projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveFovRHToRef": {
          "kind": "method",
          "signature": "static PerspectiveFovRHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fov": {
              "name": "fov",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the horizontal field of view"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "aspect": {
              "name": "aspect",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the aspect ratio"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "isVerticalFovFixed": {
              "name": "isVerticalFovFixed",
              "description": [
                {
                  "kind": "text",
                  "text": "defines it the fov is vertically fixed (default) or horizontally"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a right-handed perspective projection into a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveFovWebVRToRef": {
          "kind": "method",
          "signature": "static PerspectiveFovWebVRToRef(fov: {\n        upDegrees: number;\n        downDegrees: number;\n        leftDegrees: number;\n        rightDegrees: number;\n    }, znear: number, zfar: number, result: Matrix, rightHanded?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fov": {
              "name": "fov",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the field of view"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "{\n        upDegrees: number;\n        downDegrees: number;\n        leftDegrees: number;\n        rightDegrees: number;\n    }"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "rightHanded": {
              "name": "rightHanded",
              "description": [
                {
                  "kind": "text",
                  "text": "defines if the matrix must be in right-handed mode (false by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores a perspective projection for WebVR info a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PerspectiveLH": {
          "kind": "method",
          "signature": "static PerspectiveLH(width: number, height: number, znear: number, zfar: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix as a left-handed perspective projection matrix"
              }
            ]
          },
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport width"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the viewport height"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "znear": {
              "name": "znear",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the near clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "zfar": {
              "name": "zfar",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the far clip plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a left-handed perspective projection matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Reflection": {
          "kind": "method",
          "signature": "static Reflection(plane: Plane): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix"
              }
            ]
          },
          "parameters": {
            "plane": {
              "name": "plane",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the reflection plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a reflection matrix from a plane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ReflectionToRef": {
          "kind": "method",
          "signature": "static ReflectionToRef(plane: Plane, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "plane": {
              "name": "plane",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the reflection plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Plane"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Computes a reflection matrix from a plane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeRotationAndScaling": {
          "kind": "method",
          "signature": "removeRotationAndScaling(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the updated matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remove rotation and scaling part from the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets all the matrix elements to zero"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAxis": {
          "kind": "method",
          "signature": "static RotationAxis(axis: Vector3, angle: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "axis": {
              "name": "axis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the axis to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the given axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAxisToRef": {
          "kind": "method",
          "signature": "static RotationAxisToRef(axis: Vector3, angle: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "axis": {
              "name": "axis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the axis to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationX": {
          "kind": "method",
          "signature": "static RotationX(angle: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the X axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationXToRef": {
          "kind": "method",
          "signature": "static RotationXToRef(angle: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationY": {
          "kind": "method",
          "signature": "static RotationY(angle: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the Y axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationYawPitchRoll": {
          "kind": "method",
          "signature": "static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new rotation matrix"
              }
            ]
          },
          "parameters": {
            "yaw": {
              "name": "yaw",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the yaw angle in radians (Y axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "pitch": {
              "name": "pitch",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the pitch angle in radians (X axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "roll": {
              "name": "roll",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the roll angle in radians (X axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationYawPitchRollToRef": {
          "kind": "method",
          "signature": "static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "yaw": {
              "name": "yaw",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the yaw angle in radians (Y axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "pitch": {
              "name": "pitch",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the pitch angle in radians (X axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "roll": {
              "name": "roll",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the roll angle in radians (X axis)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation matrix and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationYToRef": {
          "kind": "method",
          "signature": "static RotationYToRef(angle: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationZ": {
          "kind": "method",
          "signature": "static RotationZ(angle: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the Z axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationZToRef": {
          "kind": "method",
          "signature": "static RotationZToRef(angle: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle (in radians) to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new matrix"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute a new matrix set with the current matrix values multiplied by scale (float)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Matrix to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current matrix values by a factor and add the result to a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current matrix values by a factor to a given result matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Scaling": {
          "kind": "method",
          "signature": "static Scaling(x: number, y: number, z: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a scaling matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ScalingToRef": {
          "kind": "method",
          "signature": "static ScalingToRef(x: number, y: number, z: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor on Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a scaling matrix and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setRow": {
          "kind": "method",
          "signature": "setRow(index: number, row: Vector4): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the updated current matrix"
              }
            ]
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the number of the row to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "row": {
              "name": "row",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector4"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the index-th row of the current matrix to the vector4 values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setRowFromFloats": {
          "kind": "method",
          "signature": "setRowFromFloats(index: number, x: number, y: number, z: number, w: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the updated current matrix"
              }
            ]
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the row index"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x component to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y component to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z component to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the w component to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the index-th row of the current matrix with the given 4 x float values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setTranslation": {
          "kind": "method",
          "signature": "setTranslation(vector3: Vector3): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "vector3": {
              "name": "vector3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation to insert"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inserts the translation vector in the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setTranslationFromFloats": {
          "kind": "method",
          "signature": "setTranslationFromFloats(x: number, y: number, z: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current updated matrix"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the 1st component of the translation"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the 2nd component of the translation"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the 3rd component of the translation"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inserts the translation vector (using 3 floats) in the current matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(): Readonly<FloatArray>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Readonly<FloatArray>",
            "description": [
              {
                "kind": "text",
                "text": "the matrix underlying array"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the matrix as a FloatArray"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleModelMatrixHandInPlace": {
          "kind": "method",
          "signature": "toggleModelMatrixHandInPlace(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Toggles model matrix from being right handed to left handed in place and vice versa"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleProjectionMatrixHandInPlace": {
          "kind": "method",
          "signature": "toggleProjectionMatrixHandInPlace(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Toggles projection matrix from being right handed to left handed in place and vice versa"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toNormalMatrix": {
          "kind": "method",
          "signature": "toNormalMatrix(ref: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ref": {
              "name": "ref",
              "description": [
                {
                  "kind": "text",
                  "text": "matrix to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Translation": {
          "kind": "method",
          "signature": "static Translation(x: number, y: number, z: number): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translationon Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a translation matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TranslationToRef": {
          "kind": "method",
          "signature": "static TranslationToRef(x: number, y: number, z: number, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation on X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translation on Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the translationon Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a translation matrix and stores it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "transpose": {
          "kind": "method",
          "signature": "transpose(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new transposed matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the transpose of the matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Transpose": {
          "kind": "method",
          "signature": "static Transpose(matrix: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the new matrix"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to transpose"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the transpose of a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "transposeToRef": {
          "kind": "method",
          "signature": "transposeToRef(result: Matrix): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "the current matrix"
              }
            ]
          },
          "parameters": {
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the transpose of the matrix and store it in a given matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransposeToRef": {
          "kind": "method",
          "signature": "static TransposeToRef(matrix: Matrix, result: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to transpose"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compute the transpose of a matrix and store it in a target matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateFlag": {
          "kind": "property",
          "signature": "updateFlag: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the update flag of the matrix which is an unique number for the matrix. It will be incremented every time the matrix data change. You can use it to speed the comparison between two versions of the same matrix."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Matrix;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Matrix",
            "description": [
              {
                "kind": "text",
                "text": "a new zero matrix"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new zero matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "MultiObserver": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represent a list of observers registered to multiple Observables object."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Release associated resources"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Watch": {
          "kind": "method",
          "signature": "static Watch<T>(observables: Observable<T>[], callback: (eventData: T, eventState: ObserverEventState) => void, mask?: number, scope?: any): MultiObserver<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "MultiObserver<T>",
            "description": [
              {
                "kind": "text",
                "text": "the new MultiObserver"
              }
            ]
          },
          "parameters": {
            "observables": {
              "name": "observables",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a list of observables to watch"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Observable<T>[]"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the callback to call on notification"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(eventData: T, eventState: ObserverEventState) => void"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask used to filter notifications"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "scope": {
              "name": "scope",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current scope used to restore the JS context"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Raise a callback when one of the observable will notify"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "newId": {
      "kind": "function",
      "signature": "export function newId(type: string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "type": {
          "name": "type",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Generates a new prefixed id"
        }
      ],
      "remarks": [],
      "isBeta": true
    },
    "OBJShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(src: string);",
          "parameters": {
            "src": {
              "name": "src",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OBJShape"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "OBJShape",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "src": {
          "kind": "property",
          "signature": "readonly src: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Observable": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Observable class is a simple implementation of the Observable pattern."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified. This enable a more fine grained execution without having to rely on multiple different Observable objects. For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08). A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(onObserverAdded?: (observer: Observer<T>) => void);",
          "parameters": {
            "onObserverAdded": {
              "name": "onObserverAdded",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a callback to call when a new observer is added"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "(observer: Observer<T>) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new observable"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(callback: (eventData: T, eventState: ObserverEventState) => void, mask?: number, insertFirst?: boolean, scope?: any, unregisterOnFirstCall?: boolean): null | Observer<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "null | Observer<T>",
            "description": [
              {
                "kind": "text",
                "text": "the new observer created for the callback"
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "the callback that will be executed for that Observer"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(eventData: T, eventState: ObserverEventState) => void"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "the mask used to filter observers"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "insertFirst": {
              "name": "insertFirst",
              "description": [
                {
                  "kind": "text",
                  "text": "if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "scope": {
              "name": "scope",
              "description": [
                {
                  "kind": "text",
                  "text": "optional scope for the callback to be called from"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "unregisterOnFirstCall": {
              "name": "unregisterOnFirstCall",
              "description": [
                {
                  "kind": "text",
                  "text": "defines if the observer as to be unregistered after the next notification"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new Observer with the specified callback"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addOnce": {
          "kind": "method",
          "signature": "addOnce(callback: (eventData: T, eventState: ObserverEventState) => void): null | Observer<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "null | Observer<T>",
            "description": [
              {
                "kind": "text",
                "text": "the new observer created for the callback"
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "the callback that will be executed for that Observer"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(eventData: T, eventState: ObserverEventState) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new Observer with the specified callback and unregisters after the next notification"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clear": {
          "kind": "method",
          "signature": "clear(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clear the list of observers"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Observable<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Observable<T>",
            "description": [
              {
                "kind": "text",
                "text": "a new observable"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clone the current observable"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasObservers": {
          "kind": "method",
          "signature": "hasObservers(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true is the Observable has at least one Observer registered"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a boolean indicating if the observable has at least one observer"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSpecificMask": {
          "kind": "method",
          "signature": "hasSpecificMask(mask?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "whether or not one observer registered with the given mask is handeled"
              }
            ]
          },
          "parameters": {
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask to be tested"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Does this observable handles observer registered with a given mask"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "notifyObserver": {
          "kind": "method",
          "signature": "notifyObserver(observer: Observer<T>, eventData: T, mask?: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "observer": {
              "name": "observer",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the observer to notify"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Observer<T>"
            },
            "eventData": {
              "name": "eventData",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the data to be sent to each callback"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "is used to filter observers defaults to -1"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notify a specific observer"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "notifyObservers": {
          "kind": "method",
          "signature": "notifyObservers(eventData: T, mask?: number, target?: any, currentTarget?: any): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)"
              }
            ]
          },
          "parameters": {
            "eventData": {
              "name": "eventData",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the data to send to all observers"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the original target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "currentTarget": {
              "name": "currentTarget",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notify all Observers by calling their respective callback with the given data Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "notifyObserversWithPromise": {
          "kind": "method",
          "signature": "notifyObserversWithPromise(eventData: T, mask?: number, target?: any, currentTarget?: any): Promise<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<T>",
            "description": [
              {
                "kind": "text",
                "text": "will return a Promise than resolves when all callbacks executed successfully."
              }
            ]
          },
          "parameters": {
            "eventData": {
              "name": "eventData",
              "description": [
                {
                  "kind": "text",
                  "text": "The data to be sent to each callback"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "is used to filter observers defaults to -1"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the callback target (see EventState)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "currentTarget": {
              "name": "currentTarget",
              "description": [
                {
                  "kind": "text",
                  "text": "defines he current object in the bubbling phase"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calling this will execute each callback, expecting it to be a promise or return a value. If at any point in the chain one function fails, the promise will fail and the execution will not continue. This is useful when a chain of events (sometimes async events) is needed to initialize a certain object and it is crucial that all callbacks will be executed. The order of the callbacks is kept, callbacks are not executed parallel."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "remove": {
          "kind": "method",
          "signature": "remove(observer: null | Observer<T>): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "false if it doesn't belong to this Observable"
              }
            ]
          },
          "parameters": {
            "observer": {
              "name": "observer",
              "description": [
                {
                  "kind": "text",
                  "text": "the instance of the Observer to remove"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "null | Observer<T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remove an Observer from the Observable object"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeCallback": {
          "kind": "method",
          "signature": "removeCallback(callback: (eventData: T, eventState: ObserverEventState) => void, scope?: any): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "false if it doesn't belong to this Observable"
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "the callback to remove"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(eventData: T, eventState: ObserverEventState) => void"
            },
            "scope": {
              "name": "scope",
              "description": [
                {
                  "kind": "text",
                  "text": "optional scope. If used only the callbacks with this scope will be removed"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remove a callback from the Observable object"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ObservableComponent": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "data": {
          "kind": "property",
          "signature": "data: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dirty": {
          "kind": "property",
          "signature": "dirty: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "field": {
          "kind": "method",
          "signature": "static field(target: ObservableComponent, propertyKey: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ObservableComponent"
            },
            "propertyKey": {
              "name": "propertyKey",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onChange": {
          "kind": "method",
          "signature": "onChange(fn: ObservableComponentSubscription): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fn": {
              "name": "fn",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ObservableComponentSubscription"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readonly": {
          "kind": "method",
          "signature": "static readonly(target: ObservableComponent, propertyKey: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ObservableComponent"
            },
            "propertyKey": {
              "name": "propertyKey",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toJSON": {
          "kind": "method",
          "signature": "toJSON(): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Observer": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represent an Observer registered to a given Observable object."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    callback: (eventData: T, eventState: ObserverEventState) => void, \n    mask: number, \n    scope?: any);",
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the callback to call when the observer is notified"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(eventData: T, eventState: ObserverEventState) => void"
            },
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask of the observer (used to filter notifications)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "scope": {
              "name": "scope",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current scope used to restore the JS context"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new observer"
            }
          ],
          "remarks": []
        },
        "_willBeUnregistered": {
          "kind": "property",
          "signature": "_willBeUnregistered: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "For internal usage"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "callback": {
          "kind": "property",
          "signature": "callback: (eventData: T, eventState: ObserverEventState) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(eventData: T, eventState: ObserverEventState) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the callback to call when the observer is notified"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mask": {
          "kind": "property",
          "signature": "mask: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the mask of the observer (used to filter notifications)"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scope": {
          "kind": "property",
          "signature": "scope: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the current scope used to restore the JS context"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "unregisterOnNextCall": {
          "kind": "property",
          "signature": "unregisterOnNextCall: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets or sets a property defining that the observer as to be unregistered after the next notification"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ObserverEventState": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "A class serves as a medium between the observable and its observers"
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any);",
          "parameters": {
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask associated with this state"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "skipNextObservers": {
              "name": "skipNextObservers",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a flag which will instruct the observable to skip following observers when set to true"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the original target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "currentTarget": {
              "name": "currentTarget",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new EventState"
            }
          ],
          "remarks": []
        },
        "currentTarget": {
          "kind": "property",
          "signature": "currentTarget?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The current object in the bubbling phase"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initalize": {
          "kind": "method",
          "signature": "initalize(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any): ObserverEventState;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ObserverEventState",
            "description": [
              {
                "kind": "text",
                "text": "the current event state"
              }
            ]
          },
          "parameters": {
            "mask": {
              "name": "mask",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the mask associated with this state"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "skipNextObservers": {
              "name": "skipNextObservers",
              "description": [
                {
                  "kind": "text",
                  "text": "defines a flag which will instruct the observable to skip following observers when set to true"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the original target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "currentTarget": {
              "name": "currentTarget",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current target of the state"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initialize the current event state"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "lastReturnValue": {
          "kind": "property",
          "signature": "lastReturnValue?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This will be populated with the return value of the last function that was executed. If it is the first function in the callback chain it will be the event data."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mask": {
          "kind": "property",
          "signature": "mask: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get the mask value that were used to trigger the event corresponding to this EventState object"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "skipNextObservers": {
          "kind": "property",
          "signature": "skipNextObservers: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An Observer can set this property to true to prevent subsequent observers of being notified"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The object that originally notified the event"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnBlur": {
      "kind": "class",
      "extends": "OnUUIDEvent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "type": {
          "kind": "property",
          "signature": "readonly type: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnChanged": {
      "kind": "class",
      "extends": "OnUUIDEvent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "type": {
          "kind": "property",
          "signature": "readonly type: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnClick": {
      "kind": "class",
      "extends": "OnUUIDEvent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "type": {
          "kind": "property",
          "signature": "readonly type: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnFocus": {
      "kind": "class",
      "extends": "OnUUIDEvent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "type": {
          "kind": "property",
          "signature": "readonly type: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnGizmoEvent": {
      "kind": "class",
      "extends": "OnUUIDEvent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "This event is triggered after the user finalizes dragging a gizmo."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "type": {
          "kind": "property",
          "signature": "readonly type: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OnPointerDown": {
      "kind": "class",
      "extends": "PointerEventComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "OnPointerUp": {
      "kind": "class",
      "extends": "PointerEventComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "OnUUIDEvent": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [
        "T extends keyof IEvents"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(callback: (event: IEvents[T]) => void);",
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "(event: IEvents[T]) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OnUUIDEvent"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "OnUUIDEvent",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "callback": {
          "kind": "property",
          "signature": "callback: (event: any) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: any) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toJSON": {
          "kind": "method",
          "signature": "toJSON:",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "{\n        uuid: string;\n        type: string | undefined;\n    }",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "type": {
          "kind": "property",
          "signature": "readonly type: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "uuid": {
          "kind": "property",
          "signature": "readonly uuid: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Orientation": {
      "kind": "enum",
      "values": {
        "CCW": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Counter clockwise"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "CW": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clockwise"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Defines potential orientation for back face culling"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ParentChanged": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(entity: Entity, parent: Entity);",
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            },
            "parent": {
              "name": "parent",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ParentChanged"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "ParentChanged",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "entity": {
          "kind": "property",
          "signature": "entity: Entity;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Entity",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "parent": {
          "kind": "property",
          "signature": "parent: Entity;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Entity",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Path2": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a 2D path made up of multiple 2D points"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(x: number, y: number);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "the starting points x value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "the starting points y value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a Path2 object from the starting 2D coordinates x and y."
            }
          ],
          "remarks": []
        },
        "addArcTo": {
          "kind": "method",
          "signature": "addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments?: number): Path2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Path2",
            "description": [
              {
                "kind": "text",
                "text": "the updated Path2."
              }
            ]
          },
          "parameters": {
            "midX": {
              "name": "midX",
              "description": [
                {
                  "kind": "text",
                  "text": "middle point x value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "midY": {
              "name": "midY",
              "description": [
                {
                  "kind": "text",
                  "text": "middle point y value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "endX": {
              "name": "endX",
              "description": [
                {
                  "kind": "text",
                  "text": "end point x value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "endY": {
              "name": "endY",
              "description": [
                {
                  "kind": "text",
                  "text": "end point y value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "numberOfSegments": {
              "name": "numberOfSegments",
              "description": [
                {
                  "kind": "text",
                  "text": "(default: 36)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addLineTo": {
          "kind": "method",
          "signature": "addLineTo(x: number, y: number): Path2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Path2",
            "description": [
              {
                "kind": "text",
                "text": "the updated Path2."
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "the added points x value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "the added points y value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds a new segment until the given coordinates (x, y) to the current Path2."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "close": {
          "kind": "method",
          "signature": "close(): Path2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Path2",
            "description": [
              {
                "kind": "text",
                "text": "the Path2."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Closes the Path2."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "closed": {
          "kind": "property",
          "signature": "closed: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If the path start and end point are the same"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getPointAtLengthPosition": {
          "kind": "method",
          "signature": "getPointAtLengthPosition(normalizedLengthPosition: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2 located at a percentage of the Path2 total length on this path."
              }
            ]
          },
          "parameters": {
            "normalizedLengthPosition": {
              "name": "normalizedLengthPosition",
              "description": [
                {
                  "kind": "text",
                  "text": "the length along the path to retreive the point from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Retreives the point at the distance aways from the starting point"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getPoints": {
          "kind": "method",
          "signature": "getPoints(): Vector2[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2[]",
            "description": [
              {
                "kind": "text",
                "text": "the Path2 internal array of points."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the points which construct the path"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "method",
          "signature": "length(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the Path2 total length (float)."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the sum of the distance between each sequential point in the path"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "StartingAt": {
          "kind": "method",
          "signature": "static StartingAt(x: number, y: number): Path2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Path2",
            "description": [
              {
                "kind": "text",
                "text": "a new Path2 starting at the coordinates (x, y)."
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "starting x value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "starting y value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new path starting from an x and y position"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Path3D": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a 3D path made up of multiple 3D points"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    path: Vector3[], firstNormal?: Nullable<Vector3>, raw?: boolean);",
          "parameters": {
            "path": {
              "name": "path",
              "description": [
                {
                  "kind": "text",
                  "text": "an array of Vector3, the curve axis of the Path3D"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3[]"
            },
            "firstNormal": {
              "name": "firstNormal",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "Nullable<Vector3>"
            },
            "raw": {
              "name": "raw",
              "description": [
                {
                  "kind": "text",
                  "text": "(optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "new Path3D(path, normal, raw) Creates a Path3D. A Path3D is a logical math object, so not a mesh. please read the description in the tutorial : http://doc.babylonjs.com/tutorials/How_to_use_Path3D"
            }
          ],
          "remarks": []
        },
        "getBinormals": {
          "kind": "method",
          "signature": "getBinormals(): Vector3[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3[]",
            "description": [
              {
                "kind": "text",
                "text": "an array populated with binormal vectors on each Path3D curve point."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns an array populated with binormal vectors on each Path3D curve point."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getCurve": {
          "kind": "method",
          "signature": "getCurve(): Vector3[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3[]",
            "description": [
              {
                "kind": "text",
                "text": "the Path3D array of successive Vector3 designing its curve."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Path3D array of successive Vector3 designing its curve."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getDistances": {
          "kind": "method",
          "signature": "getDistances(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "an array populated with distances (float) of the i-th point from the first curve point."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns an array populated with distances (float) of the i-th point from the first curve point."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getNormals": {
          "kind": "method",
          "signature": "getNormals(): Vector3[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3[]",
            "description": [
              {
                "kind": "text",
                "text": "an array populated with normal vectors on each Path3D curve point."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns an array populated with normal vectors on each Path3D curve point."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getTangents": {
          "kind": "method",
          "signature": "getTangents(): Vector3[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3[]",
            "description": [
              {
                "kind": "text",
                "text": "an array populated with tangent vectors on each Path3D curve point."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns an array populated with tangent vectors on each Path3D curve point."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "path": {
          "kind": "property",
          "signature": "path: Vector3[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector3[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "an array of Vector3, the curve axis of the Path3D"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "update": {
          "kind": "method",
          "signature": "update(path: Vector3[], firstNormal?: Nullable<Vector3>): Path3D;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Path3D",
            "description": [
              {
                "kind": "text",
                "text": "the same object updated."
              }
            ]
          },
          "parameters": {
            "path": {
              "name": "path",
              "description": [
                {
                  "kind": "text",
                  "text": "path which all values are copied into the curves points"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3[]"
            },
            "firstNormal": {
              "name": "firstNormal",
              "description": [
                {
                  "kind": "text",
                  "text": "which should be projected onto the curve"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Nullable<Vector3>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Forces the Path3D tangent, normal, binormal and distance recomputation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Plane": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represens a plane by the equation ax + by + cz + d = 0"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(a: number, b: number, c: number, d: number);",
          "parameters": {
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "a component of the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "b component of the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "c": {
              "name": "c",
              "description": [
                {
                  "kind": "text",
                  "text": "c component of the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "d": {
              "name": "d",
              "description": [
                {
                  "kind": "text",
                  "text": "d component of the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0"
            }
          ],
          "remarks": []
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "the plane coordinates as a new array of 4 elements [a, b, c, d]."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "a new plane copied from the current Plane."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromPoints": {
          "kind": "method",
          "signature": "copyFromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "the updated Plane."
              }
            ]
          },
          "parameters": {
            "point1": {
              "name": "point1",
              "description": [
                {
                  "kind": "text",
                  "text": "one of the points used to contruct the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "point2": {
              "name": "point2",
              "description": [
                {
                  "kind": "text",
                  "text": "one of the points used to contruct the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "point3": {
              "name": "point3",
              "description": [
                {
                  "kind": "text",
                  "text": "one of the points used to contruct the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Plane from the plane defined by the three given points."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "d": {
          "kind": "property",
          "signature": "d: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "d component of the plane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dotCoordinate": {
          "kind": "method",
          "signature": "dotCoordinate(point: Vector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the dot product (float) of the point coordinates and the plane normal."
              }
            ]
          },
          "parameters": {
            "point": {
              "name": "point",
              "description": [
                {
                  "kind": "text",
                  "text": "point to calculate the dot product with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calcualtte the dot product between the point and the plane normal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "a new Plane from the given array."
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "the array to create a plane from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a plane from an array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromPoints": {
          "kind": "method",
          "signature": "static FromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "a new Plane defined by the three given points."
              }
            ]
          },
          "parameters": {
            "point1": {
              "name": "point1",
              "description": [
                {
                  "kind": "text",
                  "text": "point used to create the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "point2": {
              "name": "point2",
              "description": [
                {
                  "kind": "text",
                  "text": "point used to create the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "point3": {
              "name": "point3",
              "description": [
                {
                  "kind": "text",
                  "text": "point used to create the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a plane from three points"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromPositionAndNormal": {
          "kind": "method",
          "signature": "static FromPositionAndNormal(origin: Vector3, normal: Vector3): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "a new Plane the normal vector to this plane at the given origin point. Note : the vector \"normal\" is updated because normalized."
              }
            ]
          },
          "parameters": {
            "origin": {
              "name": "origin",
              "description": [
                {
                  "kind": "text",
                  "text": "origin of the plane to be constructed"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "normal": {
              "name": "normal",
              "description": [
                {
                  "kind": "text",
                  "text": "normal of the plane to be constructed"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a plane from an origin point and a normal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Plane\"."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the Plane hash code."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isFrontFacingTo": {
          "kind": "method",
          "signature": "isFrontFacingTo(direction: Vector3, epsilon: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True is the vector \"direction\" is the same side than the plane normal."
              }
            ]
          },
          "parameters": {
            "direction": {
              "name": "direction",
              "description": [
                {
                  "kind": "text",
                  "text": "the direction to check if the plane is facing"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "epsilon": {
              "name": "epsilon",
              "description": [
                {
                  "kind": "text",
                  "text": "value the dot product is compared against (returns true if dot &lt;= epsilon)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checks if the plane is facing a given direction"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normal": {
          "kind": "property",
          "signature": "normal: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normal of the plane (a,b,c)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "normalize": {
          "kind": "method",
          "signature": "normalize(): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "the updated Plane."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the current Plane in place."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "signedDistanceTo": {
          "kind": "method",
          "signature": "signedDistanceTo(point: Vector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the signed distance (float) from the given point to the Plane."
              }
            ]
          },
          "parameters": {
            "point": {
              "name": "point",
              "description": [
                {
                  "kind": "text",
                  "text": "point to calculate distance to"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculates the distance to a point"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "SignedDistanceToPlaneFromPositionAndNormal": {
          "kind": "method",
          "signature": "static SignedDistanceToPlaneFromPositionAndNormal(origin: Vector3, normal: Vector3, point: Vector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point."
              }
            ]
          },
          "parameters": {
            "origin": {
              "name": "origin",
              "description": [
                {
                  "kind": "text",
                  "text": "origin of the plane to be constructed"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "normal": {
              "name": "normal",
              "description": [
                {
                  "kind": "text",
                  "text": "normal of the plane to be constructed"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "point": {
              "name": "point",
              "description": [
                {
                  "kind": "text",
                  "text": "point to calculate distance to"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculates the distance from a plane and a point"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "transform": {
          "kind": "method",
          "signature": "transform(transformation: Matrix): Plane;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Plane",
            "description": [
              {
                "kind": "text",
                "text": "a new Plane as the result of the transformation of the current Plane by the given matrix."
              }
            ]
          },
          "parameters": {
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "the transformation matrix to be applied to the plane"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Applies a transformation the plane and returns the result"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PlaneShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the vertical length of the plane. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "uvs": {
          "kind": "property",
          "signature": "uvs: number[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the UV coordinates for the plane. Used to map specific pieces of a Material's texture into the plane's geometry."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the horizontal length of the plane. Defaults to 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Pointer": {
      "kind": "enum",
      "values": {
        "PRIMARY": {
          "kind": "enum value",
          "value": "\"PRIMARY\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SECONDARY": {
          "kind": "enum value",
          "value": "\"SECONDARY\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PointerEventComponent": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(callback: (event: LocalPointerEvent) => void);",
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "(event: LocalPointerEvent) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PointerEventComponent"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "PointerEventComponent",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "callback": {
          "kind": "property",
          "signature": "readonly callback: (event: LocalPointerEvent) => void;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "(event: LocalPointerEvent) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Quaternion": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class used to store quaternion data "
        },
        {
          "kind": "web-link",
          "elements": [
            {
              "kind": "text",
              "text": "https://en.wikipedia.org/wiki/Quaternion"
            }
          ],
          "targetUrl": "https://en.wikipedia.org/wiki/Quaternion"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "web-link",
          "elements": [
            {
              "kind": "text",
              "text": "http://doc.babylonjs.com/features/position,_rotation,_scaling"
            }
          ],
          "targetUrl": "http://doc.babylonjs.com/features/position,_rotation,_scaling"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    x?: number, \n    y?: number, \n    z?: number, \n    w?: number);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first component (0 by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second component (0 by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third component (0 by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the fourth component (1.0 by default)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Quaternion from the given floats"
            }
          ],
          "remarks": []
        },
        "Angle": {
          "kind": "method",
          "signature": "static Angle(quat1: ReadOnlyQuaternion, quat2: ReadOnlyQuaternion): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {
            "quat1": {
              "name": "quat1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "quat2": {
              "name": "quat2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the angle in degrees between two rotations a and b."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "angleAxis": {
          "kind": "method",
          "signature": "angleAxis(degress: number, axis: Vector3): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": []
          },
          "parameters": {
            "degress": {
              "name": "degress",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "axis": {
              "name": "axis",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "AreClose": {
          "kind": "method",
          "signature": "static AreClose(quat0: ReadOnlyQuaternion, quat1: ReadOnlyQuaternion): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the two quaternions are close to each other"
              }
            ]
          },
          "parameters": {
            "quat0": {
              "name": "quat0",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first quaternion to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "quat1": {
              "name": "quat1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second quaternion to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checks if the two quaternions are close to each other"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "a new array populated with 4 elements from the quaternion coordinates"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy the quaternion to an array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion copied from the current one"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clone the current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "conjugate": {
          "kind": "method",
          "signature": "conjugate(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Conjugates in place (1-q) the current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "conjugateInPlace": {
          "kind": "method",
          "signature": "conjugateInPlace(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current updated quaternion"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Conjugates in place (1-q) the current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "conjugateToRef": {
          "kind": "method",
          "signature": "conjugateToRef(ref: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current quaternion"
              }
            ]
          },
          "parameters": {
            "ref": {
              "name": "ref",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Conjugates (1-q) the current quaternion and stores the result in the given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(other: ReadOnlyQuaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the updated current quaternion"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy a quaternion to the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(x: number, y: number, z: number, w: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the updated current quaternion"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the w coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current quaternion with the given float coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Dot": {
          "kind": "method",
          "signature": "static Dot(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the dot product"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the dot product (float) between the quaternions \"left\" and \"right\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(otherQuaternion: ReadOnlyQuaternion): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the current quaternion and the given one coordinates are strictly equals"
              }
            ]
          },
          "parameters": {
            "otherQuaternion": {
              "name": "otherQuaternion",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check if two quaternions are equals"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Euler": {
          "kind": "method",
          "signature": "static Euler(x: number, y: number, z: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "the rotation on the x axis in euler degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "the rotation on the y axis in euler degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "the rotation on the z axis in euler degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "eulerAngles": {
          "kind": "property",
          "signature": "eulerAngles: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the euler angle representation of the rotation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the data source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array where the data starts"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from data stored into an array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromEulerAnglesRef": {
          "kind": "method",
          "signature": "static FromEulerAnglesRef(x: number, y: number, z: number, result: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from a set of euler angles and stores it in the target quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromRotationMatrix": {
          "kind": "method",
          "signature": "fromRotationMatrix(matrix: Matrix): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current updated quaternion"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current quaternion from the given rotation matrix values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromRotationMatrix": {
          "kind": "method",
          "signature": "static FromRotationMatrix(matrix: Matrix): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion created from the given rotation matrix values"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from a rotation matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromRotationMatrixToRef": {
          "kind": "method",
          "signature": "static FromRotationMatrixToRef(matrix: Matrix, result: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given quaternion with the given rotation matrix values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromToRotation": {
          "kind": "method",
          "signature": "static FromToRotation(from: Vector3, to: Vector3): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": []
          },
          "parameters": {
            "from": {
              "name": "from",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first Vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "to": {
              "name": "to",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second Vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation which rotates from fromDirection to toDirection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Quaternion\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the class name of the quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the quaternion hash code"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a hash code for this quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Hermite": {
          "kind": "method",
          "signature": "static Hermite(value1: ReadOnlyQuaternion, tangent1: ReadOnlyQuaternion, value2: ReadOnlyQuaternion, tangent2: ReadOnlyQuaternion, amount: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the new interpolated quaternion"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "tangent1": {
              "name": "tangent1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the incoming tangent"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "tangent2": {
              "name": "tangent2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the outgoing tangent"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Interpolate between two quaternions using Hermite interpolation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Identity": {
          "kind": "property",
          "signature": "static readonly Identity: Quaternion;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "Quaternion",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an identity quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Inverse": {
          "kind": "method",
          "signature": "static Inverse(q: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion as the inverted current quaternion"
              }
            ]
          },
          "parameters": {
            "q": {
              "name": "q",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inverse a given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "IsIdentity": {
          "kind": "method",
          "signature": "static IsIdentity(quaternion: ReadOnlyQuaternion): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the quaternion is identity"
              }
            ]
          },
          "parameters": {
            "quaternion": {
              "name": "quaternion",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the quaternion to check"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a boolean indicating if the given quaternion is identity"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "property",
          "signature": "readonly length: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets length of current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lengthSquared": {
          "kind": "property",
          "signature": "readonly lengthSquared: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets length of current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "LookRotation": {
          "kind": "method",
          "signature": "static LookRotation(forward: Vector3, up?: Vector3): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": []
          },
          "parameters": {
            "forward": {
              "name": "forward",
              "description": [
                {
                  "kind": "text",
                  "text": "the direction to look in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector that defines in which direction up is"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation with the specified forward and upwards directions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(q1: ReadOnlyQuaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion set as the multiplication result of the current one with the given one \"q1\""
              }
            ]
          },
          "parameters": {
            "q1": {
              "name": "q1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies two quaternions"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyInPlace": {
          "kind": "method",
          "signature": "multiplyInPlace(q1: ReadOnlyQuaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the currentupdated quaternion"
              }
            ]
          },
          "parameters": {
            "q1": {
              "name": "q1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current quaternion with the multiplication of itself with the given one \"q1\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(q1: ReadOnlyQuaternion, result: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current quaternion"
              }
            ]
          },
          "parameters": {
            "q1": {
              "name": "q1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalize": {
          "kind": "method",
          "signature": "normalize(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current updated quaternion"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize in place the current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalized": {
          "kind": "property",
          "signature": "readonly normalized: Quaternion;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Quaternion",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts this quaternion to one with the same orientation but with a magnitude of 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "RotateTowards": {
          "kind": "method",
          "signature": "static RotateTowards(from: ReadOnlyQuaternion, to: Quaternion, maxDegreesDelta: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": []
          },
          "parameters": {
            "from": {
              "name": "from",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "to": {
              "name": "to",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            },
            "maxDegreesDelta": {
              "name": "maxDegreesDelta",
              "description": [
                {
                  "kind": "text",
                  "text": "the interval step"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The from quaternion is rotated towards to by an angular step of maxDegreesDelta."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAlphaBetaGamma": {
          "kind": "method",
          "signature": "static RotationAlphaBetaGamma(alpha: number, beta: number, gamma: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the new quaternion"
              }
            ]
          },
          "parameters": {
            "alpha": {
              "name": "alpha",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "beta": {
              "name": "beta",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "gamma": {
              "name": "gamma",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAlphaBetaGammaToRef": {
          "kind": "method",
          "signature": "static RotationAlphaBetaGammaToRef(alpha: number, beta: number, gamma: number, result: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "alpha": {
              "name": "alpha",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "beta": {
              "name": "beta",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "gamma": {
              "name": "gamma",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAxis": {
          "kind": "method",
          "signature": "static RotationAxis(axis: Vector3, angle: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion created from the given axis (Vector3) and angle in radians (float)"
              }
            ]
          },
          "parameters": {
            "axis": {
              "name": "axis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the axis to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle to use (in Euler degrees)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a quaternion from a rotation around an axis"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationAxisToRef": {
          "kind": "method",
          "signature": "static RotationAxisToRef(axis: Vector3, angle: number, result: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the target quaternion"
              }
            ]
          },
          "parameters": {
            "axis": {
              "name": "axis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the axis to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the angle to use (in Euler degrees)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation around an axis and stores it into the given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationQuaternionFromAxis": {
          "kind": "method",
          "signature": "static RotationQuaternionFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the new quaternion"
              }
            ]
          },
          "parameters": {
            "axis1": {
              "name": "axis1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis2": {
              "name": "axis2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis3": {
              "name": "axis3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationQuaternionFromAxisToRef": {
          "kind": "method",
          "signature": "static RotationQuaternionFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "axis1": {
              "name": "axis1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis2": {
              "name": "axis2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis3": {
              "name": "axis3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "ref": {
              "name": "ref",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationYawPitchRoll": {
          "kind": "method",
          "signature": "static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the new quaternion"
              }
            ]
          },
          "parameters": {
            "yaw": {
              "name": "yaw",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "pitch": {
              "name": "pitch",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "roll": {
              "name": "roll",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new quaternion from the given Euler float angles (y, x, z)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationYawPitchRollToRef": {
          "kind": "method",
          "signature": "static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "yaw": {
              "name": "yaw",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around Y axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "pitch": {
              "name": "pitch",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around X axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "roll": {
              "name": "roll",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the rotation around Z axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(value: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\""
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current quaternion by a scale factor"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current quaternion"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Quaternion object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current quaternion values by a factor and add the result to a given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleInPlace": {
          "kind": "method",
          "signature": "scaleInPlace(value: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current modified quaternion"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies in place the current quaternion by a scale factor"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current quaternion"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Quaternion object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current quaternion values by a factor and stores the result to a given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(x: number, y: number, z: number, w: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the updated current quaternion"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the w coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current quaternion from the given float coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setEuler": {
          "kind": "method",
          "signature": "setEuler(x: number, y: number, z: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the updated current quaternion"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current quaternion from the given euler angles"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setFromToRotation": {
          "kind": "method",
          "signature": "setFromToRotation(from: Vector3, to: Vector3, up?: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "from": {
              "name": "from",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first Vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "to": {
              "name": "to",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second Vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "up": {
              "name": "up",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the direction"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a rotation which rotates from fromDirection to toDirection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Slerp": {
          "kind": "method",
          "signature": "static Slerp(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion, amount: number): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the new interpolated quaternion"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Interpolates between two quaternions"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "SlerpToRef": {
          "kind": "method",
          "signature": "static SlerpToRef(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion, amount: number, result: Quaternion): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyQuaternion"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the gradient to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Interpolates between two quaternions and stores it into a target quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(other: Quaternion): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion as the subtraction result of the given one from the current one"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtract two quaternions"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toRotationMatrix": {
          "kind": "method",
          "signature": "toRotationMatrix(result: Matrix): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "the current unchanged quaternion"
              }
            ]
          },
          "parameters": {
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given rotation matrix with the current quaternion values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string with the Quaternion coordinates"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a string representation for the current quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "w": {
          "kind": "property",
          "signature": "w: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the fourth component (1.0 by default)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "x": {
          "kind": "property",
          "signature": "x: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the first component (0 by default)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the second component (0 by default)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "z": {
          "kind": "property",
          "signature": "z: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the third component (0 by default)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new quaternion set to (0.0, 0.0, 0.0)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an empty quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Scalar": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Scalar computation library"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "Clamp": {
          "kind": "method",
          "signature": "static Clamp(value: number, min?: number, max?: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the clamped value"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "the value to clmap"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "the min value to clamp to (default: 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "the max value to clamp to (default: 1)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if the value is greater than max."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DeltaAngle": {
          "kind": "method",
          "signature": "static DeltaAngle(current: number, target: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the delta"
              }
            ]
          },
          "parameters": {
            "current": {
              "name": "current",
              "description": [
                {
                  "kind": "text",
                  "text": "current angle in degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "target angle in degrees"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculates the shortest difference between two given angles given in degrees."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Denormalize": {
          "kind": "method",
          "signature": "static Denormalize(normalized: number, min: number, max: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the denormalized value"
              }
            ]
          },
          "parameters": {
            "normalized": {
              "name": "normalized",
              "description": [
                {
                  "kind": "text",
                  "text": "value to denormalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "max to denormalize between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "min to denormalize between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Denormalize the value from 0.0 and 1.0 using min and max values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Hermite": {
          "kind": "method",
          "signature": "static Hermite(value1: number, tangent1: number, value2: number, tangent2: number, amount: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "hermite result"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "spline value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "tangent1": {
              "name": "tangent1",
              "description": [
                {
                  "kind": "text",
                  "text": "spline value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "spline value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "tangent2": {
              "name": "tangent2",
              "description": [
                {
                  "kind": "text",
                  "text": "spline value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "input value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\". "
            },
            {
              "kind": "web-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "http://mathworld.wolfram.com/HermitePolynomial.html"
                }
              ],
              "targetUrl": "http://mathworld.wolfram.com/HermitePolynomial.html"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "InverseLerp": {
          "kind": "method",
          "signature": "static InverseLerp(a: number, b: number, value: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the inverseLerp value"
              }
            ]
          },
          "parameters": {
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "target value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "value between a and b"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculates the linear parameter t that produces the interpolant value within the range [a, b]."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(start: number, end: number, amount: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the lerped value"
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "target value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "amount to lerp between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LerpAngle": {
          "kind": "method",
          "signature": "static LerpAngle(start: number, end: number, amount: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the lerped value"
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "target value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "amount to lerp between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Log2": {
          "kind": "method",
          "signature": "static Log2(value: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the log2 of value."
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "the value to compute log2 of"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the log2 of value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "MoveTowards": {
          "kind": "method",
          "signature": "static MoveTowards(current: number, target: number, maxDelta: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "resulting value"
              }
            ]
          },
          "parameters": {
            "current": {
              "name": "current",
              "description": [
                {
                  "kind": "text",
                  "text": "current value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "target value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "maxDelta": {
              "name": "maxDelta",
              "description": [
                {
                  "kind": "text",
                  "text": "max distance to move"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Moves a value current towards target."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "MoveTowardsAngle": {
          "kind": "method",
          "signature": "static MoveTowardsAngle(current: number, target: number, maxDelta: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "resulting angle"
              }
            ]
          },
          "parameters": {
            "current": {
              "name": "current",
              "description": [
                {
                  "kind": "text",
                  "text": "current value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "target": {
              "name": "target",
              "description": [
                {
                  "kind": "text",
                  "text": "target value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "maxDelta": {
              "name": "maxDelta",
              "description": [
                {
                  "kind": "text",
                  "text": "max distance to move"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Normalize": {
          "kind": "method",
          "signature": "static Normalize(value: number, min: number, max: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the normalized value"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "value to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "max to normalize between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "min to normalize between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the value between 0.0 and 1.0 using min and max values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "NormalizeRadians": {
          "kind": "method",
          "signature": "static NormalizeRadians(angle: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "The converted angle."
              }
            ]
          },
          "parameters": {
            "angle": {
              "name": "angle",
              "description": [
                {
                  "kind": "text",
                  "text": "The angle to normalize in radian."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the angle converted to equivalent value between -Math.PI and Math.PI radians."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PercentToRange": {
          "kind": "method",
          "signature": "static PercentToRange(percent: number, min: number, max: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the number"
              }
            ]
          },
          "parameters": {
            "percent": {
              "name": "percent",
              "description": [
                {
                  "kind": "text",
                  "text": "to convert to number"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "min range"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "max range"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This function returns number that corresponds to the percentage in a given range."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "PercentToRange(0.34,0,100) will return 34."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PingPong": {
          "kind": "method",
          "signature": "static PingPong(tx: number, length: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "The returned value will move back and forth between 0 and length"
              }
            ]
          },
          "parameters": {
            "tx": {
              "name": "tx",
              "description": [
                {
                  "kind": "text",
                  "text": "value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "length": {
              "name": "length",
              "description": [
                {
                  "kind": "text",
                  "text": "length"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "PingPongs the value t, so that it is never larger than length and never smaller than 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RandomRange": {
          "kind": "method",
          "signature": "static RandomRange(min: number, max: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "random value"
              }
            ]
          },
          "parameters": {
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "min value of random"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "max value of random"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a random float number between and min and max values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RangeToPercent": {
          "kind": "method",
          "signature": "static RangeToPercent(num: number, min: number, max: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the percentage"
              }
            ]
          },
          "parameters": {
            "num": {
              "name": "num",
              "description": [
                {
                  "kind": "text",
                  "text": "to convert to percentage"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "min range"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "max range"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This function returns percentage of a number in a given range."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Repeat": {
          "kind": "method",
          "signature": "static Repeat(value: number, length: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the looped value"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "the value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "length": {
              "name": "length",
              "description": [
                {
                  "kind": "text",
                  "text": "the length"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Loops the value, so that it is never larger than length and never smaller than 0."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Sign": {
          "kind": "method",
          "signature": "static Sign(value: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the value itself if it's equal to zero."
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns -1 if value is negative and +1 is value is positive."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "SmoothStep": {
          "kind": "method",
          "signature": "static SmoothStep(from: number, to: number, tx: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the smooth stepped value"
              }
            ]
          },
          "parameters": {
            "from": {
              "name": "from",
              "description": [
                {
                  "kind": "text",
                  "text": "from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "to": {
              "name": "to",
              "description": [
                {
                  "kind": "text",
                  "text": "to"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "tx": {
              "name": "tx",
              "description": [
                {
                  "kind": "text",
                  "text": "value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Interpolates between min and max with smoothing at the limits."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ToHex": {
          "kind": "method",
          "signature": "static ToHex(i: number): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the upper case translation of the number i to hexadecimal."
              }
            ]
          },
          "parameters": {
            "i": {
              "name": "i",
              "description": [
                {
                  "kind": "text",
                  "text": "number"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a string : the upper case translation of the number i to hexadecimal."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TwoPi": {
          "kind": "property",
          "signature": "static TwoPi: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Two pi constants convenient for computation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "WithinEpsilon": {
          "kind": "method",
          "signature": "static WithinEpsilon(a: number, b: number, epsilon?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)"
              }
            ]
          },
          "parameters": {
            "a": {
              "name": "a",
              "description": [
                {
                  "kind": "text",
                  "text": "number"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [
                {
                  "kind": "text",
                  "text": "number"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "epsilon": {
              "name": "epsilon",
              "description": [
                {
                  "kind": "text",
                  "text": "(default = 1.401298E-45)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Shape": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {}
    },
    "Size": {
      "kind": "class",
      "extends": "",
      "implements": "ISize",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Size containing widht and height"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(width: number, height: number);",
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "width of the new size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "height of the new size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a Size object from the given width and height (floats)."
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(otherSize: Size): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size set as the addition result of the current Size and the given one."
              }
            ]
          },
          "parameters": {
            "otherSize": {
              "name": "otherSize",
              "description": [
                {
                  "kind": "text",
                  "text": "size to add to this size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sums the width and height of two sizes"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size copied from the given one."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clones the size"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(src: Size): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "src": {
              "name": "src",
              "description": [
                {
                  "kind": "text",
                  "text": "the given size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current size from the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(width: number, height: number): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "the updated Size."
              }
            ]
          },
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "width of the new size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "height of the new size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates in place the current Size from the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(other: Size): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if the current Size and the given one width and height are strictly equal."
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "the other size to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "True if the current Size and the given one width and height are strictly equal."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Size\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "\"Size\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "a hash code for a unique width and height"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Size hash code."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(start: Size, end: Size, amount: number): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\""
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "starting size to lerp between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "end size to lerp between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "amount to lerp between the start and end values"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyByFloats": {
          "kind": "method",
          "signature": "multiplyByFloats(w: number, h: number): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size set with the multiplication result of the current Size and the given floats."
              }
            ]
          },
          "parameters": {
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "factor to multiple the width by"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "h": {
              "name": "h",
              "description": [
                {
                  "kind": "text",
                  "text": "factor to multiple the height by"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the width and height by numbers"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(width: number, height: number): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "the updated Size."
              }
            ]
          },
          "parameters": {
            "width": {
              "name": "width",
              "description": [
                {
                  "kind": "text",
                  "text": "width to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "height": {
              "name": "height",
              "description": [
                {
                  "kind": "text",
                  "text": "height to set"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates in place the current Size from the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(otherSize: Size): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size set as the subtraction result of the given one from the current Size."
              }
            ]
          },
          "parameters": {
            "otherSize": {
              "name": "otherSize",
              "description": [
                {
                  "kind": "text",
                  "text": "size to subtract to this size"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Size"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtracts the width and height of two"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "surface": {
          "kind": "property",
          "signature": "readonly surface: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The surface of the Size : width * height (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string with the Size width and height"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a string with the Size width and height"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Size;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Size",
            "description": [
              {
                "kind": "text",
                "text": "a new Size set to (0.0, 0.0)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new size of zero"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Space": {
      "kind": "enum",
      "values": {
        "BONE": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Bone space"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "LOCAL": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Local (object) space"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "WORLD": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "World space"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Defines supported spaces"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "SphereShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "TextShape": {
      "kind": "class",
      "extends": "Shape",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(value?: string);",
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TextShape"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "TextShape",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "billboard": {
          "kind": "property",
          "signature": "billboard: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "color": {
          "kind": "property",
          "signature": "color: Color3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fontFamily": {
          "kind": "property",
          "signature": "fontFamily: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fontSize": {
          "kind": "property",
          "signature": "fontSize: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fontWeight": {
          "kind": "property",
          "signature": "fontWeight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hAlign": {
          "kind": "property",
          "signature": "hAlign: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isPickable": {
          "kind": "property",
          "signature": "isPickable: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lineCount": {
          "kind": "property",
          "signature": "lineCount: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lineSpacing": {
          "kind": "property",
          "signature": "lineSpacing: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "opacity": {
          "kind": "property",
          "signature": "opacity: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "outlineColor": {
          "kind": "property",
          "signature": "outlineColor: Color3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "outlineWidth": {
          "kind": "property",
          "signature": "outlineWidth: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "paddingBottom": {
          "kind": "property",
          "signature": "paddingBottom: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "paddingLeft": {
          "kind": "property",
          "signature": "paddingLeft: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "paddingRight": {
          "kind": "property",
          "signature": "paddingRight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "paddingTop": {
          "kind": "property",
          "signature": "paddingTop: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resizeToFit": {
          "kind": "property",
          "signature": "resizeToFit: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shadowBlur": {
          "kind": "property",
          "signature": "shadowBlur: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shadowColor": {
          "kind": "property",
          "signature": "shadowColor: Color3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Color3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shadowOffsetX": {
          "kind": "property",
          "signature": "shadowOffsetX: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shadowOffsetY": {
          "kind": "property",
          "signature": "shadowOffsetY: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "textWrapping": {
          "kind": "property",
          "signature": "textWrapping: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "vAlign": {
          "kind": "property",
          "signature": "vAlign: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "zIndex": {
          "kind": "property",
          "signature": "zIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Transform": {
      "kind": "class",
      "extends": "ObservableComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(args?: TranformConstructorArgs);",
          "parameters": {
            "args": {
              "name": "args",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "TranformConstructorArgs"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Transform"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "decentraland-ecs",
                "exportName": "Transform",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "eulerAngles": {
          "kind": "property",
          "signature": "readonly eulerAngles: Vector3;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The rotation as Euler angles in degrees."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lookAt": {
          "kind": "method",
          "signature": "lookAt(target: Vector3, worldUp?: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "worldUp": {
              "name": "worldUp",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rotates the transform so the forward vector points at target's current position."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "position": {
          "kind": "property",
          "signature": "position: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotate": {
          "kind": "method",
          "signature": "rotate(axis: Vector3, angle: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "axis": {
              "name": "axis",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "angle": {
              "name": "angle",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Applies a rotation of euler angles around the x, y and z axis."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rotation": {
          "kind": "property",
          "signature": "rotation: Quaternion;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Quaternion",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scale": {
          "kind": "property",
          "signature": "scale: Vector3;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Vector3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "translate": {
          "kind": "method",
          "signature": "translate(vec: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vec": {
              "name": "vec",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Moves the transform in the direction and distance of translation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "UUIDEvent": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T = any"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "payload": {
          "kind": "property",
          "signature": "payload: T;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "uuid": {
          "kind": "property",
          "signature": "uuid: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UUIDEventSystem": {
      "kind": "class",
      "extends": "",
      "implements": "ISystem",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activate": {
          "kind": "method",
          "signature": "activate(engine: Engine): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "engine": {
              "name": "engine",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Engine"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "deactivate": {
          "kind": "method",
          "signature": "deactivate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "handlerMap": {
          "kind": "property",
          "signature": "handlerMap:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [uuid: string]: OnUUIDEvent<any>;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAddEntity": {
          "kind": "method",
          "signature": "onAddEntity(entity: Entity): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onRemoveEntity": {
          "kind": "method",
          "signature": "onRemoveEntity(entity: Entity): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "entity": {
              "name": "entity",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Entity"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Vector2": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class representing a vector containing 2 coordinates"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    x?: number, \n    y?: number);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first coordinate"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second coordinate"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Vector2 from the given x and y coordinates"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2 set with the addition of the current Vector2 and the given one coordinates"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Add another vector with the current one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Add": {
          "kind": "method",
          "signature": "static Add(vector1: ReadOnlyVector2, vector2: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the resulting vector"
              }
            ]
          },
          "parameters": {
            "vector1": {
              "name": "vector1",
              "description": [
                {
                  "kind": "text",
                  "text": "the first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "vector2": {
              "name": "vector2",
              "description": [
                {
                  "kind": "text",
                  "text": "the second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 as the result of the addition of the two given vectors."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addInPlace": {
          "kind": "method",
          "signature": "addInPlace(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set the Vector2 coordinates by adding the given Vector2 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToRef": {
          "kind": "method",
          "signature": "addToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addVector3": {
          "kind": "method",
          "signature": "addVector3(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "a new array with 2 elements: the Vector2 coordinates."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copy the current vector to an array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CatmullRom": {
          "kind": "method",
          "signature": "static CatmullRom(value1: ReadOnlyVector2, value2: ReadOnlyVector2, value3: ReadOnlyVector2, value4: ReadOnlyVector2, amount: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st point of control"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd point of control"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value3": {
              "name": "value3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd point of control"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value4": {
              "name": "value4",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 4th point of control"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the interpolation factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Center": {
          "kind": "method",
          "signature": "static Center(value1: ReadOnlyVector2, value2: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Clamp": {
          "kind": "method",
          "signature": "static Clamp(value: ReadOnlyVector2, min: ReadOnlyVector2, max: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the value to clamp"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the lower limit"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the upper limit"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\". If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate. If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 copied from the Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(source: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source Vector2"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the Vector2 coordinates with the given Vector2 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(x: number, y: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the Vector2 coordinates with the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Distance": {
          "kind": "method",
          "signature": "static Distance(value1: Vector2, value2: Vector2): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the distance between vectors"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the distance between the vectors \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DistanceOfPointFromSegment": {
          "kind": "method",
          "signature": "static DistanceOfPointFromSegment(p: Vector2, segA: Vector2, segB: Vector2): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the shortest distance"
              }
            ]
          },
          "parameters": {
            "p": {
              "name": "p",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the middle point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "segA": {
              "name": "segA",
              "description": [
                {
                  "kind": "text",
                  "text": "defines one point of the segment"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "segB": {
              "name": "segB",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other point of the segment"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DistanceSquared": {
          "kind": "method",
          "signature": "static DistanceSquared(value1: ReadOnlyVector2, value2: ReadOnlyVector2): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the squared distance between vectors"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the squared distance between the vectors \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divide": {
          "kind": "method",
          "signature": "divide(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideInPlace": {
          "kind": "method",
          "signature": "divideInPlace(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divides the current Vector2 coordinates by the given ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideToRef": {
          "kind": "method",
          "signature": "divideToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Dot": {
          "kind": "method",
          "signature": "static Dot(left: ReadOnlyVector2, right: ReadOnlyVector2): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the dot product (float)"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the dot product of the vector \"left\" and the vector \"right\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(otherVector: ReadOnlyVector2): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the given vector coordinates strictly equal the current Vector2 ones"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a boolean if two vectors are equals"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsWithEpsilon": {
          "kind": "method",
          "signature": "equalsWithEpsilon(otherVector: ReadOnlyVector2, epsilon?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the given vector coordinates are close to the current ones by a distance of epsilon."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "epsilon": {
              "name": "epsilon",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the minimal distance to consider equality"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a boolean if two vectors are equals (using an epsilon value)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "floor": {
          "kind": "method",
          "signature": "floor(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 from current Vector2 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fract": {
          "kind": "method",
          "signature": "fract(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 from current Vector2 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the data source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the data source"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 set from the given index element of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArrayToRef": {
          "kind": "method",
          "signature": "static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector2): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the data source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the data source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets \"result\" from the given index element of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Vector2\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the Vector2 hash code as a number"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets current vector hash code"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Hermite": {
          "kind": "method",
          "signature": "static Hermite(value1: ReadOnlyVector2, tangent1: ReadOnlyVector2, value2: ReadOnlyVector2, tangent2: ReadOnlyVector2, amount: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the 1st control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "tangent1": {
              "name": "tangent1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the outgoing tangent"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the 2nd control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "tangent2": {
              "name": "tangent2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the incoming tangent"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the interpolation factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "method",
          "signature": "length(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the vector length (float)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the length of the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "lengthSquared": {
          "kind": "method",
          "signature": "lengthSquared(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the vector squared length (float)"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the vector squared length"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(start: ReadOnlyVector2, end: ReadOnlyVector2, amount: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the interpolation factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Maximize": {
          "kind": "method",
          "signature": "static Maximize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Minimize": {
          "kind": "method",
          "signature": "static Minimize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyByFloats": {
          "kind": "method",
          "signature": "multiplyByFloats(x: number, y: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyInPlace": {
          "kind": "method",
          "signature": "multiplyInPlace(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies in place the current Vector2 coordinates by the given ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "negate": {
          "kind": "method",
          "signature": "negate(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 with current Vector2 negated coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalize": {
          "kind": "method",
          "signature": "normalize(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Normalize": {
          "kind": "method",
          "signature": "static Normalize(vector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the vector to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 equal to the normalized given vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "One": {
          "kind": "method",
          "signature": "static One(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2(1, 1)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "PointInTriangle": {
          "kind": "method",
          "signature": "static PointInTriangle(p: ReadOnlyVector2, p0: ReadOnlyVector2, p1: ReadOnlyVector2, p2: ReadOnlyVector2): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\""
              }
            ]
          },
          "parameters": {
            "p": {
              "name": "p",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the vector to test"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "p0": {
              "name": "p0",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 1st triangle point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "p1": {
              "name": "p1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 2nd triangle point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "p2": {
              "name": "p2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines 3rd triangle point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if a given vector is included in a triangle"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector2 scaled by \"scale\" from the current Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector2 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Vector2 values by a factor and add the result to a given Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleInPlace": {
          "kind": "method",
          "signature": "scaleInPlace(scale: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scaling factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiply the Vector2 coordinates by scale"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector2 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Vector2 values by a factor to a given Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(x: number, y: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second coordinate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the Vector2 coordinates with the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractInPlace": {
          "kind": "method",
          "signature": "subtractInPlace(otherVector: ReadOnlyVector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the current Vector2 coordinates by subtracting from it the given one coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractToRef": {
          "kind": "method",
          "signature": "subtractToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector2"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the other vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(array: FloatArray, index?: number): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector2"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the Vector2 coordinates in the given array or FloatArray from the given index."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string with the Vector2 coordinates"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a string with the Vector2 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Transform": {
          "kind": "method",
          "signature": "static Transform(vector: Vector2, transformation: Matrix): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the vector to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformToRef": {
          "kind": "method",
          "signature": "static TransformToRef(vector: ReadOnlyVector2, transformation: Matrix, result: Vector2): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the vector to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector2"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the matrix to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector2"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "x": {
          "kind": "property",
          "signature": "x: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the first coordinate"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "defines the second coordinate"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Vector2;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector2",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector2"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector2(0, 0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Vector3": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Classed used to store (x,y,z) vector representation A Vector3 is the main object used in 3D geometry It can represent etiher the coordinates of a point the space, either a direction Reminder: Babylon.js uses a left handed forward facing system"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    x?: number, \n    y?: number, \n    z?: number);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first coordinates (on X axis)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second coordinates (on Y axis)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third coordinates (on Z axis)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Vector3 object from the given x, y, z (floats) coordinates."
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the resulting Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector3, result of the addition the current Vector3 and the given vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Add": {
          "kind": "method",
          "signature": "static Add(vector1: ReadOnlyVector3, vector2: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the resulting vector"
              }
            ]
          },
          "parameters": {
            "vector1": {
              "name": "vector1",
              "description": [
                {
                  "kind": "text",
                  "text": "the first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "vector2": {
              "name": "vector2",
              "description": [
                {
                  "kind": "text",
                  "text": "the second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 as the result of the addition of the two given vectors."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addInPlace": {
          "kind": "method",
          "signature": "addInPlace(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds the given vector to the current Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addInPlaceFromFloats": {
          "kind": "method",
          "signature": "addInPlaceFromFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds the given coordinates to the current Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToRef": {
          "kind": "method",
          "signature": "addToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds the current Vector3 to the given one and stores the result in the vector \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "applyMatrix4": {
          "kind": "method",
          "signature": "applyMatrix4(matrix: Matrix): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "The transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "applyMatrix4ToRef": {
          "kind": "method",
          "signature": "applyMatrix4ToRef(matrix: Matrix, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "matrix": {
              "name": "matrix",
              "description": [
                {
                  "kind": "text",
                  "text": "The transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "a new array of numbers"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates an array containing three elements : the coordinates of the Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Backward": {
          "kind": "method",
          "signature": "static Backward(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new forward Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (0.0, 0.0, -1.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CatmullRom": {
          "kind": "method",
          "signature": "static CatmullRom(value1: ReadOnlyVector3, value2: ReadOnlyVector3, value3: ReadOnlyVector3, value4: ReadOnlyVector3, amount: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value3": {
              "name": "value3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value4": {
              "name": "value4",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the fourth control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the amount on the spline to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Center": {
          "kind": "method",
          "signature": "static Center(value1: ReadOnlyVector3, value2: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 located at the center between \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Clamp": {
          "kind": "method",
          "signature": "static Clamp(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the lower range value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the upper range value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ClampToRef": {
          "kind": "method",
          "signature": "static ClampToRef(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the current value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "min": {
              "name": "min",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the lower range value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "max": {
              "name": "max",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the upper range value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new Vector3 copied from the current Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(source: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source Vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given vector coordinates to the current Vector3 ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given floats to the current Vector3 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Cross": {
          "kind": "method",
          "signature": "static Cross(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the cross product"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "CrossToRef": {
          "kind": "method",
          "signature": "static CrossToRef(left: ReadOnlyVector3, right: ReadOnlyVector3, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the cross product of \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Distance": {
          "kind": "method",
          "signature": "static Distance(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the distance"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the distance between the vectors \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DistanceSquared": {
          "kind": "method",
          "signature": "static DistanceSquared(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the squared distance"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the squared distance between the vectors \"value1\" and \"value2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divide": {
          "kind": "method",
          "signature": "divide(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideInPlace": {
          "kind": "method",
          "signature": "divideInPlace(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divides the current Vector3 coordinates by the given ones."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideToRef": {
          "kind": "method",
          "signature": "divideToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Dot": {
          "kind": "method",
          "signature": "static Dot(left: ReadOnlyVector3, right: ReadOnlyVector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the dot product"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the left operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the right operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the dot product (float) between the vectors \"left\" and \"right\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Down": {
          "kind": "method",
          "signature": "static Down(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new down Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (0.0, -1.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(otherVector: ReadOnlyVector3): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if both vectors are equals"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the current Vector3 and the given vector coordinates are strictly equal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsToFloats": {
          "kind": "method",
          "signature": "equalsToFloats(x: number, y: number, z: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if both vectors are equals"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the current Vector3 coordinates equals the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsWithEpsilon": {
          "kind": "method",
          "signature": "equalsWithEpsilon(otherVector: ReadOnlyVector3, epsilon?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if both vectors are distant less than epsilon"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "epsilon": {
              "name": "epsilon",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the minimal distance to define values as equals"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "floor": {
          "kind": "method",
          "signature": "floor(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector3 from current Vector3 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Forward": {
          "kind": "method",
          "signature": "static Forward(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new forward Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (0.0, 0.0, 1.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fract": {
          "kind": "method",
          "signature": "fract(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector3 from current Vector3 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set from the index \"offset\" of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArrayToRef": {
          "kind": "method",
          "signature": "static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the element values from the index \"offset\" of the given array"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatArray": {
          "kind": "method",
          "signature": "static FromFloatArray(array: FloatArray, offset?: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArray instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatArrayToRef": {
          "kind": "method",
          "signature": "static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the source array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArrayToRef instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatsToRef": {
          "kind": "method",
          "signature": "static FromFloatsToRef(x: number, y: number, z: number, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetAngleBetweenVectors": {
          "kind": "method",
          "signature": "static GetAngleBetweenVectors(vector0: Vector3, vector1: Vector3, normal: ReadOnlyVector3): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the angle between vector0 and vector1"
              }
            ]
          },
          "parameters": {
            "vector0": {
              "name": "vector0",
              "description": [
                {
                  "kind": "text",
                  "text": "angle between vector0 and vector1"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "vector1": {
              "name": "vector1",
              "description": [
                {
                  "kind": "text",
                  "text": "angle between vector0 and vector1"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "normal": {
              "name": "normal",
              "description": [
                {
                  "kind": "text",
                  "text": "direction of the normal"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get angle between two vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "the string \"Vector3\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "GetClipFactor": {
          "kind": "method",
          "signature": "static GetClipFactor(vector0: ReadOnlyVector3, vector1: ReadOnlyVector3, axis: ReadOnlyVector3, size: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the clip factor"
              }
            ]
          },
          "parameters": {
            "vector0": {
              "name": "vector0",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "vector1": {
              "name": "vector1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "axis": {
              "name": "axis",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the axis to use"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "size": {
              "name": "size",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the size along the axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get the clip factor between two vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "a number which tends to be unique between Vector3 instances"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates the Vector3 hash code"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Hermite": {
          "kind": "method",
          "signature": "static Hermite(value1: ReadOnlyVector3, tangent1: ReadOnlyVector3, value2: ReadOnlyVector3, tangent2: ReadOnlyVector3, amount: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "tangent1": {
              "name": "tangent1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first tangent vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second control point"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "tangent2": {
              "name": "tangent2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second tangent vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the amount on the interpolation spline (between 0 and 1)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isNonUniform": {
          "kind": "property",
          "signature": "readonly isNonUniform: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Left": {
          "kind": "method",
          "signature": "static Left(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new left Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (-1.0, 0.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "method",
          "signature": "length(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the length of the Vecto3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the length of the Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "lengthSquared": {
          "kind": "method",
          "signature": "lengthSquared(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "squared length of the Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the squared length of the Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Lerp": {
          "kind": "method",
          "signature": "static Lerp(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "max defines amount between both (between 0 and 1)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "LerpToRef": {
          "kind": "method",
          "signature": "static LerpToRef(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the start value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the end value"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "amount": {
              "name": "amount",
              "description": [
                {
                  "kind": "text",
                  "text": "max defines amount between both (between 0 and 1)"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Maximize": {
          "kind": "method",
          "signature": "static Maximize(left: Vector3, right: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the maximal coordinate values between two Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "maximizeInPlace": {
          "kind": "method",
          "signature": "maximizeInPlace(other: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector3 with the maximal coordinate values between its and the given vector ones."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "maximizeInPlaceFromFloats": {
          "kind": "method",
          "signature": "maximizeInPlaceFromFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector3 with the maximal coordinate values between its and the given coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Minimize": {
          "kind": "method",
          "signature": "static Minimize(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the minimal coordinate values between two Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "minimizeInPlace": {
          "kind": "method",
          "signature": "minimizeInPlace(other: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector3 with the minimal coordinate values between its and the given vector ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "minimizeInPlaceFromFloats": {
          "kind": "method",
          "signature": "minimizeInPlaceFromFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector3 with the minimal coordinate values between its and the given coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyByFloats": {
          "kind": "method",
          "signature": "multiplyByFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyInPlace": {
          "kind": "method",
          "signature": "multiplyInPlace(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current Vector3 coordinates by the given ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "negate": {
          "kind": "method",
          "signature": "negate(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector3 set with the current Vector3 negated coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalize": {
          "kind": "method",
          "signature": "normalize(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the current Vector3. Please note that this is an in place operation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Normalize": {
          "kind": "method",
          "signature": "static Normalize(vector: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 as the normalization of the given vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalizeFromLength": {
          "kind": "method",
          "signature": "normalizeFromLength(len: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "len": {
              "name": "len",
              "description": [
                {
                  "kind": "text",
                  "text": "the length of the vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the current Vector3 with the given input length. Please note that this is an in place operation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalizeToNew": {
          "kind": "method",
          "signature": "normalizeToNew(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the current Vector3 to a new vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalizeToRef": {
          "kind": "method",
          "signature": "normalizeToRef(reference: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector3"
              }
            ]
          },
          "parameters": {
            "reference": {
              "name": "reference",
              "description": [
                {
                  "kind": "text",
                  "text": "define the Vector3 to update"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalize the current Vector3 to the reference"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "NormalizeToRef": {
          "kind": "method",
          "signature": "static NormalizeToRef(vector: Vector3, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the normalization of the given first vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "One": {
          "kind": "method",
          "signature": "static One(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new unit Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (1.0, 1.0, 1.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Right": {
          "kind": "method",
          "signature": "static Right(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new right Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (1.0, 0.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rotate": {
          "kind": "method",
          "signature": "rotate(q: Quaternion): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "q": {
              "name": "q",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rotates the current Vector3 based on the given quaternion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rotateToRef": {
          "kind": "method",
          "signature": "rotateToRef(q: Quaternion, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "q": {
              "name": "q",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Quaternion"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Quaternion"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the target Vector3"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationFromAxis": {
          "kind": "method",
          "signature": "static RotationFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3"
              }
            ]
          },
          "parameters": {
            "axis1": {
              "name": "axis1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis2": {
              "name": "axis2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis3": {
              "name": "axis3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this operation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "RotationFromAxisToRef": {
          "kind": "method",
          "signature": "static RotationFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "axis1": {
              "name": "axis1",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the first axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis2": {
              "name": "axis2",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "axis3": {
              "name": "axis3",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the third axis"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            },
            "ref": {
              "name": "ref",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the multiplier factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Vector3 values by a factor and add the result to a given Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleInPlace": {
          "kind": "method",
          "signature": "scaleInPlace(scale: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the multiplier factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the Vector3 coordinates by the float \"scale\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the multiplier factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given floats to the current Vector3 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setAll": {
          "kind": "method",
          "signature": "setAll(v: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "v": {
              "name": "v",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x, y and z coordinates of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given float to the current Vector3 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the resulting Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3, result of the subtraction of the given vector from the current Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractFromFloats": {
          "kind": "method",
          "signature": "subtractFromFloats(x: number, y: number, z: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the resulting Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractFromFloatsToRef": {
          "kind": "method",
          "signature": "subtractFromFloatsToRef(x: number, y: number, z: number, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the y coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the z coordinate of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractInPlace": {
          "kind": "method",
          "signature": "subtractInPlace(otherVector: ReadOnlyVector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtract the given vector from the current Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractToRef": {
          "kind": "method",
          "signature": "subtractToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(array: FloatArray, index?: number): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector3"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the destination array"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the offset in the destination array"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toQuaternion": {
          "kind": "method",
          "signature": "toQuaternion(): Quaternion;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Quaternion",
            "description": [
              {
                "kind": "text",
                "text": "a new Quaternion object, computed from the Vector3 coordinates"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string with the Vector3 coordinates."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a string representation of the Vector3"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformCoordinates": {
          "kind": "method",
          "signature": "static TransformCoordinates(vector: ReadOnlyVector3, transformation: Matrix): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the transformed Vector3"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformCoordinatesFromFloatsToRef": {
          "kind": "method",
          "signature": "static TransformCoordinatesFromFloatsToRef(x: number, y: number, z: number, transformation: Readonly<Matrix>, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "define the x coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "define the y coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "define the z coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformCoordinatesToRef": {
          "kind": "method",
          "signature": "static TransformCoordinatesToRef(vector: ReadOnlyVector3, transformation: Readonly<Matrix>, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormal": {
          "kind": "method",
          "signature": "static TransformNormal(vector: ReadOnlyVector3, transformation: Matrix): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "the new Vector3"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormalFromFloatsToRef": {
          "kind": "method",
          "signature": "static TransformNormalFromFloatsToRef(x: number, y: number, z: number, transformation: Readonly<Matrix>, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "define the x coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "define the y coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "define the z coordinate of the source vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply translation)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormalToRef": {
          "kind": "method",
          "signature": "static TransformNormalToRef(vector: ReadOnlyVector3, transformation: Readonly<Matrix>, result: Vector3): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector3"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the transformation matrix"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<Matrix>"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector3 where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector3"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Up": {
          "kind": "method",
          "signature": "static Up(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new up Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (0.0, 1.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "x": {
          "kind": "property",
          "signature": "x: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the first coordinates (on X axis)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the second coordinates (on Y axis)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "z": {
          "kind": "property",
          "signature": "z: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the third coordinates (on Z axis)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "a new empty Vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 set to (0.0, 0.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Vector4": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Vector4 class created for EulerAngle class conversion to Quaternion"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    x: number, \n    y: number, \n    z: number, \n    w: number);",
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "x value of the vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "y value of the vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "z value of the vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "w value of the vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a Vector4 object from the given floats."
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the resulting vector"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 as the result of the addition of the current Vector4 and the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Add": {
          "kind": "method",
          "signature": "static Add(vector1: ReadOnlyVector4, vector2: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the resulting vector"
              }
            ]
          },
          "parameters": {
            "vector1": {
              "name": "vector1",
              "description": [
                {
                  "kind": "text",
                  "text": "the first vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "vector2": {
              "name": "vector2",
              "description": [
                {
                  "kind": "text",
                  "text": "the second vector"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 as the result of the addition of the two given vectors."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addInPlace": {
          "kind": "method",
          "signature": "addInPlace(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds the given vector to the current Vector4."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "addToRef": {
          "kind": "method",
          "signature": "addToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "asArray": {
          "kind": "method",
          "signature": "asArray(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": [
              {
                "kind": "text",
                "text": "the resulting array"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new array populated with 4 elements : the Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Center": {
          "kind": "method",
          "signature": "static Center(value1: ReadOnlyVector4, value2: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the center between the two vectors"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the center between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the center between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clone": {
          "kind": "method",
          "signature": "clone(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new cloned vector"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 copied from the current one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFrom": {
          "kind": "method",
          "signature": "copyFrom(source: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "source": {
              "name": "source",
              "description": [
                {
                  "kind": "text",
                  "text": "the source vector to copy from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector4 with the given one coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyFromFloats": {
          "kind": "method",
          "signature": "copyFromFloats(x: number, y: number, z: number, w: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "float to copy from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "float to copy from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "float to copy from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "float to copy from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector4 coordinates with the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Distance": {
          "kind": "method",
          "signature": "static Distance(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the distance between the two vectors"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the distance between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the distance between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the distance (float) between the vectors \"value1\" and \"value2\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "DistanceSquared": {
          "kind": "method",
          "signature": "static DistanceSquared(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the distance between the two vectors squared"
              }
            ]
          },
          "parameters": {
            "value1": {
              "name": "value1",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the distance between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "value2": {
              "name": "value2",
              "description": [
                {
                  "kind": "text",
                  "text": "value to calulate the distance between"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the squared distance (float) between the vectors \"value1\" and \"value2\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divide": {
          "kind": "method",
          "signature": "divide(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "resulting new vector"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to devide with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the division result of the current Vector4 by the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideInPlace": {
          "kind": "method",
          "signature": "divideInPlace(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector3."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to devide with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divides the current Vector3 coordinates by the given ones."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "divideToRef": {
          "kind": "method",
          "signature": "divideToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to devide with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" with the division result of the current Vector4 by the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(otherVector: ReadOnlyVector4): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if they are equal"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean : True if the current Vector4 coordinates are stricly equal to the given ones."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsToFloats": {
          "kind": "method",
          "signature": "equalsToFloats(x: number, y: number, z: number, w: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if equal"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "x value to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "y value to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "z value to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "w value to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean : True if the given floats are strictly equal to the current Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equalsWithEpsilon": {
          "kind": "method",
          "signature": "equalsWithEpsilon(otherVector: ReadOnlyVector4, epsilon?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "true if they are equal"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to compare against"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "epsilon": {
              "name": "epsilon",
              "description": [
                {
                  "kind": "text",
                  "text": "(Default: very small number)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "floor": {
          "kind": "method",
          "signature": "floor(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector4"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector4 from current Vector4 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fract": {
          "kind": "method",
          "signature": "fract(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new Vector4"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets a new Vector4 from current Vector3 floored values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArray": {
          "kind": "method",
          "signature": "static FromArray(array: ArrayLike<number>, offset?: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new vector"
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "the array to pull values from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "the offset into the array to start at"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set from the starting index of the given array."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromArrayToRef": {
          "kind": "method",
          "signature": "static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "the array to pull values from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ArrayLike<number>"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "the offset into the array to start at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" from the starting index of the given array."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatArrayToRef": {
          "kind": "method",
          "signature": "static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "the array to pull values from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "offset": {
              "name": "offset",
              "description": [
                {
                  "kind": "text",
                  "text": "the offset into the array to start at"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" from the starting index of the given FloatArray."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "FromFloatsToRef": {
          "kind": "method",
          "signature": "static FromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to the floats in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" coordinates from the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "\"Vector4\""
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the string \"Vector4\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getHashCode": {
          "kind": "method",
          "signature": "getHashCode(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "a unique hash code"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Vector4 hash code."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "length": {
          "kind": "method",
          "signature": "length(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the length"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Vector4 length (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "lengthSquared": {
          "kind": "method",
          "signature": "lengthSquared(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "the length squared"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Vector4 squared length (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Maximize": {
          "kind": "method",
          "signature": "static Maximize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new vector with the maximum of the left and right vector values"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "left vector to maximize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "right vector to maximize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a vector with the maximum values from the left and right vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "maximizeInPlace": {
          "kind": "method",
          "signature": "maximizeInPlace(other: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector4"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the Vector4 coordinates with the maximum values between its own and the given vector ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Minimize": {
          "kind": "method",
          "signature": "static Minimize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new vector with the minimum of the left and right vector values"
              }
            ]
          },
          "parameters": {
            "left": {
              "name": "left",
              "description": [
                {
                  "kind": "text",
                  "text": "left vector to minimize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "right": {
              "name": "right",
              "description": [
                {
                  "kind": "text",
                  "text": "right vector to minimize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a vector with the minimum values from the left and right vectors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "minimizeInPlace": {
          "kind": "method",
          "signature": "minimizeInPlace(other: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector4"
              }
            ]
          },
          "parameters": {
            "other": {
              "name": "other",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the second operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the Vector4 coordinates with the minimum values between its own and the given vector ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiply": {
          "kind": "method",
          "signature": "multiply(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "resulting new vector"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to multiple with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyByFloats": {
          "kind": "method",
          "signature": "multiplyByFloats(x: number, y: number, z: number, w: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "resulting new vector"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "x value multiply with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "y value multiply with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "z value multiply with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "w value multiply with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyInPlace": {
          "kind": "method",
          "signature": "multiplyInPlace(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to multiple with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies in place the current Vector4 by the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "multiplyToRef": {
          "kind": "method",
          "signature": "multiplyToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to multiple with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "vector to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "negate": {
          "kind": "method",
          "signature": "negate(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new vector with the negated values"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the current Vector4 negated coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "normalize": {
          "kind": "method",
          "signature": "normalize(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Normalizes in place the Vector4."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "Normalize": {
          "kind": "method",
          "signature": "static Normalize(vector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the vector"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new normalized Vector4 from the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "NormalizeToRef": {
          "kind": "method",
          "signature": "static NormalizeToRef(vector: ReadOnlyVector4, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to normalize"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the given vector \"result\" from the normalization of the given one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "One": {
          "kind": "method",
          "signature": "static One(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new vector"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scale": {
          "kind": "method",
          "signature": "scale(scale: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "a new vector with the result"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "the number to scale with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleAndAddToRef": {
          "kind": "method",
          "signature": "scaleAndAddToRef(scale: number, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the unmodified current Vector4"
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the scale factor"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the Vector4 object where to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scale the current Vector4 values by a factor and add the result to a given Vector4"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleInPlace": {
          "kind": "method",
          "signature": "scaleInPlace(scale: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "the number to scale with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Multiplies the current Vector4 coordinates by scale (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scaleToRef": {
          "kind": "method",
          "signature": "scaleToRef(scale: number, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "scale": {
              "name": "scale",
              "description": [
                {
                  "kind": "text",
                  "text": "the number to scale with"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "a vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "set": {
          "kind": "method",
          "signature": "set(x: number, y: number, z: number, w: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "float to set from"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the current Vector4 coordinates with the given floats."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setAll": {
          "kind": "method",
          "signature": "setAll(v: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current updated Vector3"
              }
            ]
          },
          "parameters": {
            "v": {
              "name": "v",
              "description": [
                {
                  "kind": "text",
                  "text": "defines the x, y, z and w coordinates of the operand"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Copies the given float to the current Vector3 coordinates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new vector with the result"
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to add"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractFromFloats": {
          "kind": "method",
          "signature": "subtractFromFloats(x: number, y: number, z: number, w: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "new vector containing the result"
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractFromFloatsToRef": {
          "kind": "method",
          "signature": "subtractFromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "value to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractInPlace": {
          "kind": "method",
          "signature": "subtractInPlace(otherVector: ReadOnlyVector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the updated Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subtract in place the given vector from the current Vector4."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractToRef": {
          "kind": "method",
          "signature": "subtractToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the current Vector4."
              }
            ]
          },
          "parameters": {
            "otherVector": {
              "name": "otherVector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to subtract"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(array: FloatArray, index?: number): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the Vector4."
              }
            ]
          },
          "parameters": {
            "array": {
              "name": "array",
              "description": [
                {
                  "kind": "text",
                  "text": "array to populate"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "FloatArray"
            },
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "index of the array to start at (default: 0)"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Populates the given array from the given index with the Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toString": {
          "kind": "method",
          "signature": "toString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "a string containing all the vector values"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the string with the Vector4 coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toVector3": {
          "kind": "method",
          "signature": "toVector3(): Vector3;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Vector3",
            "description": [
              {
                "kind": "text",
                "text": "this converted to a new vector3"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector3 from the Vector4 (x, y, z) coordinates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormal": {
          "kind": "method",
          "signature": "static TransformNormal(vector: ReadOnlyVector4, transformation: Matrix): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new vector"
              }
            ]
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "the transformation matrix to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormalFromFloatsToRef": {
          "kind": "method",
          "signature": "static TransformNormalFromFloatsToRef(x: number, y: number, z: number, w: number, transformation: Matrix, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "x": {
              "name": "x",
              "description": [
                {
                  "kind": "text",
                  "text": "value to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "y": {
              "name": "y",
              "description": [
                {
                  "kind": "text",
                  "text": "value to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "z": {
              "name": "z",
              "description": [
                {
                  "kind": "text",
                  "text": "value to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "w": {
              "name": "w",
              "description": [
                {
                  "kind": "text",
                  "text": "value to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "the transformation matrix to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the results in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w). This methods computes transformed normalized direction vectors only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "TransformNormalToRef": {
          "kind": "method",
          "signature": "static TransformNormalToRef(vector: ReadOnlyVector4, transformation: Matrix, result: Vector4): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "vector": {
              "name": "vector",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to transform"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ReadOnlyVector4"
            },
            "transformation": {
              "name": "transformation",
              "description": [
                {
                  "kind": "text",
                  "text": "the transformation matrix to apply"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Matrix"
            },
            "result": {
              "name": "result",
              "description": [
                {
                  "kind": "text",
                  "text": "the vector to store the result in"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Vector4"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "w": {
          "kind": "property",
          "signature": "w: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "w value of the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "x": {
          "kind": "property",
          "signature": "x: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "x value of the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "y value of the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "z": {
          "kind": "property",
          "signature": "z: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "z value of the vector"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "Zero": {
          "kind": "method",
          "signature": "static Zero(): Vector4;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Vector4",
            "description": [
              {
                "kind": "text",
                "text": "the new vector"
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    }
  }
}
